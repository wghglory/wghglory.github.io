<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guanghui</title>
  <icon>https://www.gravatar.com/avatar/232c7a61b36dd381b53060a2200c6f43</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wghglory.github.io/"/>
  <updated>2017-11-23T02:07:17.611Z</updated>
  <id>https://wghglory.github.io/</id>
  
  <author>
    <name>Guanghui Wang</name>
    <email>wghglory89@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反思</title>
    <link href="https://wghglory.github.io/2017/11/22/diary/"/>
    <id>https://wghglory.github.io/2017/11/22/diary/</id>
    <published>2017-11-22T02:05:03.000Z</published>
    <updated>2017-11-23T02:07:17.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成熟、勇气"><a href="#成熟、勇气" class="headerlink" title="成熟、勇气"></a>成熟、勇气</h1><h3 id="十点读书-–-一个家庭悲惨的女孩考上了哈佛"><a href="#十点读书-–-一个家庭悲惨的女孩考上了哈佛" class="headerlink" title="十点读书 – 一个家庭悲惨的女孩考上了哈佛"></a>十点读书 – 一个家庭悲惨的女孩考上了哈佛</h3><p>她拥有悲惨的成长经历，却从来不向命运低头。一个人如果经历各种屈辱和心酸，但心中仍然充满阳光、大爱；经历各种挫折，但不改心中的理想；经营各种的不公，但内心仍然平和，这本身就是一种非常高贵的人格。如何理解真正的成熟？一个没有经历过黑暗和风雨的人不能称之为成熟。一个了解的世界的黑暗，历经风雨就怨声载道的人，本身就是一个弱者。因为真正成熟的人是你明明了解人性的黑暗，但是仍然用善良作为做人的标准；你明明受过伤害，但不以同样的方式憎恨他人；你明明饱经人世间的悲惨却仍然怀着慈悲，感恩之心；你明明了解走捷径的规则却仍然坚守自己的原则。你尝遍了世间的冷漠，却仍然用阳光的心态，做命运的主宰者。</p><h3 id="猎场"><a href="#猎场" class="headerlink" title="猎场"></a>猎场</h3><p>郑秋冬（胡歌）在猎曲区长（张嘉译）的时候遇到了各种险阻。他说了一句话 – <strong>既然运气都差到家了，那就试试勇气</strong>。不要放弃，尤其是在个人人格或者一些原则性东西受到质疑的时候，也许这份勇气就会赢得尊重！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;成熟、勇气&quot;&gt;&lt;a href=&quot;#成熟、勇气&quot; class=&quot;headerlink&quot; title=&quot;成熟、勇气&quot;&gt;&lt;/a&gt;成熟、勇气&lt;/h1&gt;&lt;h3 id=&quot;十点读书-–-一个家庭悲惨的女孩考上了哈佛&quot;&gt;&lt;a href=&quot;#十点读书-–-一个家庭悲惨的女孩考上了哈
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES2015 most useful features</title>
    <link href="https://wghglory.github.io/2017/05/19/ES6/"/>
    <id>https://wghglory.github.io/2017/05/19/ES6/</id>
    <published>2017-05-19T04:00:08.000Z</published>
    <updated>2017-11-22T15:33:20.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Declaring-Variables-in-ES6"><a href="#Declaring-Variables-in-ES6" class="headerlink" title="Declaring Variables in ES6"></a>Declaring Variables in ES6</h1><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>A constant is a variable that cannot be changed. Like other languages had done before it, JavaScript introduced constants with ES6.</p><p>Before constants, all we had were variables, and variables could be overwritten:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pizza = <span class="literal">true</span></span><br><span class="line">pizza = <span class="literal">false</span></span><br><span class="line"><span class="built_in">console</span>.log(pizza) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>We cannot reset the value of a constant variable, and it will generate a console error if we try to overwrite the value:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pizza = <span class="literal">true</span></span><br><span class="line">pizza = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>JavaScript now has <em>lexical variable scoping</em>. In JavaScript, we create code blocks with curly braces (<code>{}</code>). With functions, these curly braces block off the scope of variables. On the other hand, think about <code>if/else</code> statements. If you’re coming from other languages, you might assume that these blocks would also block variable scope. This is not the case.</p><p>If a variable is created inside of an <code>if/else</code> block, that variable is not scoped to the block:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topic = <span class="string">"JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (topic) &#123;</span><br><span class="line">  <span class="keyword">var</span> topic = <span class="string">"React"</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'block'</span>, topic)     <span class="comment">// block React</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global'</span>, topic)      <span class="comment">// global React</span></span><br></pre></td></tr></table></figure><p>The <code>topic</code> variable inside the <code>if</code> block resets the value of <code>topic</code>.</p><p>With the <code>let</code> keyword, we can scope a variable to any code block. Using <code>let</code> protects the value of the global variable:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topic = <span class="string">"JavaScript"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (topic) &#123;</span><br><span class="line">  <span class="keyword">let</span> topic = <span class="string">"React"</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'block'</span>, topic)     <span class="comment">// React</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global'</span>, topic)      <span class="comment">// JavaScript</span></span><br></pre></td></tr></table></figure><p>The value of <code>topic</code> is not reset outside of the block.</p><p>Another area where curly braces don’t block off a variable’s scope is in <code>for</code> loops:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div, </span><br><span class="line">    container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'This is box #'</span> + i)</span><br><span class="line">   &#125;</span><br><span class="line">  container.appendChild(div)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this loop, we create five <code>div</code>s to appear within a container. Each <code>div</code> is assigned an <code>onclick</code> handler that creates an alert box to display the index. Declaring <code>i</code> in the <code>for</code> loop creates a global variable named <code>i</code>, and then iterates it until its value reaches <code>5</code>. When you click on any of these boxes, the alert says that <code>i</code> is equal to <code>5</code> for all <code>div</code>s, because the current value for the global <code>i</code> is <code>5</code>.</p><p>Declaring the loop counter <code>i</code> with <code>let</code> instead of <code>var</code> does block off the scope of <code>i</code>. Now clicking on any box will display the value for <code>i</code> that was scoped to the loop iteration:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div, container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'This is box #: '</span> + i)</span><br><span class="line">   &#125;</span><br><span class="line">  container.appendChild(div)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h2><p>Template strings provide us with an alternative to string concatenation. They also allow us to insert variables into a string.</p><p>Traditional string concatenation uses plus signs or commas to compose a string using variable values and strings:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(lastName + <span class="string">", "</span> + firstName + <span class="string">" "</span> + middleName)</span><br></pre></td></tr></table></figure><p>With a template, we can create one string and insert the variable values by surrounding them with <code>${ }</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;lastName&#125;</span>, <span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;middleName&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>Any JavaScript that returns a value can be added to a template string between the <code>${ }</code> in a template string.</p><p>Template strings honor whitespace, making it easier to draft up email templates, code examples, or anything else that contains whitespace. Now you can have a string that spans multiple lines without breaking your code. </p><h5 id="Example-Template-strings-honor-whitespace"><a href="#Example-Template-strings-honor-whitespace" class="headerlink" title="Example: Template strings honor whitespace"></a>Example: Template strings honor whitespace</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">   Hello <span class="subst">$&#123;firstName&#125;</span>,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Thanks for ordering <span class="subst">$&#123;qty&#125;</span> tickets to <span class="subst">$&#123;event&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Order Details</span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;middleName&#125;</span> <span class="subst">$&#123;lastName&#125;</span></span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;qty&#125;</span> x $<span class="subst">$&#123;price&#125;</span> = $<span class="subst">$&#123;qty*price&#125;</span> to <span class="subst">$&#123;event&#125;</span></span></span><br><span class="line"><span class="string">             </span></span><br><span class="line"><span class="string">   You can pick your tickets up at will call 30 minutes before </span></span><br><span class="line"><span class="string">   the show.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Thanks,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   <span class="subst">$&#123;ticketAgent&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>Previously, using an HTML string directly in our JavaScript code was not so easy to do because we’d need to run it together on one line. Now that the whitespace is recognized as text, you can insert formatted HTML that is easy to understand:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;section&gt;</span></span><br><span class="line"><span class="string">  &lt;header&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;The HTML5 Blog&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;/header&gt;</span></span><br><span class="line"><span class="string">  &lt;article&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;<span class="subst">$&#123;article.title&#125;</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;article.body&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/article&gt;</span></span><br><span class="line"><span class="string">  &lt;footer&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;copyright <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getYear()&#125;</span> | The HTML5 Blog&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/footer&gt;</span></span><br><span class="line"><span class="string">&lt;/section&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>Notice that we can include variables for the page title and article text as well.</p><h2 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h2><p>Languages including C++ and Python allow developers to declare default values for function arguments. Default parameters are included in the ES6 spec, so in the event that a value is not provided for the argument, the default value will be used.</p><p>For example, we can set up default strings:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logActivity</span>(<span class="params">name=<span class="string">"Shane McConkey"</span>, activity=<span class="string">"skiing"</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> loves <span class="subst">$&#123;activity&#125;</span>`</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If no arguments are provided to the <code>favoriteActivity</code> function, it will run correctly using the default values. Default arguments can be any type, not just strings:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defaultPerson = &#123;</span><br><span class="line">    name: &#123; </span><br><span class="line">        first: <span class="string">"Shane"</span>, </span><br><span class="line">        last: <span class="string">"McConkey"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    favActivity: <span class="string">"skiing"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logActivity</span>(<span class="params">p=defaultPerson</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;p.name.first&#125;</span> loves <span class="subst">$&#123;p.favActivity&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h1><p>Arrow functions are a useful new feature of ES6. With arrow functions, you can create functions without using the <code>function</code> keyword. You also often do not have to use the <code>return</code> keyword. </p><h5 id="Example-As-a-traditional-function"><a href="#Example-As-a-traditional-function" class="headerlink" title="Example: As a traditional function"></a>Example: As a traditional function</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lordify = <span class="function"><span class="keyword">function</span>(<span class="params">firstname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstname&#125;</span> of Canterbury`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( lordify(<span class="string">"Dale"</span>) )       <span class="comment">// Dale of Canterbury</span></span><br><span class="line"><span class="built_in">console</span>.log( lordify(<span class="string">"Daryle"</span>) )     <span class="comment">// Daryle of Canterbury</span></span><br></pre></td></tr></table></figure><p>With an arrow function, we can simplify the syntax tremendously.</p><h5 id="Example-As-an-arrow-function"><a href="#Example-As-an-arrow-function" class="headerlink" title="Example: As an arrow function"></a>Example: As an arrow function</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lordify = <span class="function"><span class="params">firstname</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;firstname&#125;</span> of Canterbury`</span></span><br></pre></td></tr></table></figure><p>With the arrow, we now have an entire function declaration on one line. The <code>function</code> keyword is removed. We also remove <code>return</code> because the arrow points to what should be returned. Another benefit is that if the function only takes one argument, we can remove the parentheses around the arguments.</p><p>More than one argument should be surrounded by parentheses:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old</span></span><br><span class="line"><span class="keyword">var</span> lordify = <span class="function"><span class="keyword">function</span>(<span class="params">firstName, land</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> of <span class="subst">$&#123;land&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">var</span> lordify = <span class="function">(<span class="params">firstName, land</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> of <span class="subst">$&#123;land&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( lordify(<span class="string">"Dale"</span>, <span class="string">"Maryland"</span>) )    <span class="comment">// Dale of Maryland</span></span><br><span class="line"><span class="built_in">console</span>.log( lordify(<span class="string">"Daryle"</span>, <span class="string">"Culpeper"</span>) )  <span class="comment">// Daryle of Culpeper</span></span><br></pre></td></tr></table></figure><p>We can keep this as a one-line function because there is only one statement that needs to be returned.</p><p>More than one line needs to be surrounded with brackets:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old</span></span><br><span class="line"><span class="keyword">var</span> lordify = <span class="function"><span class="keyword">function</span>(<span class="params">firstName, land</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!firstName) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'A firstName is required to lordify'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!land) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'A lord must have a land'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> of <span class="subst">$&#123;land&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">var</span> _lordify = <span class="function">(<span class="params">firstName, land</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!firstName) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'A firstName is required to lordify'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!land) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'A lord must have a land'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> of <span class="subst">$&#123;land&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( lordify(<span class="string">"Kelly"</span>, <span class="string">"Sonoma"</span>) )   <span class="comment">// Kelly of Sonoma</span></span><br><span class="line"><span class="built_in">console</span>.log( lordify(<span class="string">"Dave"</span>) )              <span class="comment">// ! JAVASCRIPT ERROR</span></span><br></pre></td></tr></table></figure><p>These <code>if/else</code> statements are surrounded with brackets but still benefit from the shorter syntax of the arrow function.</p><p>Arrow functions do not block <code>this</code>. For example, <code>this</code> becomes something else in the <code>setTimeout</code> callback, not the <code>tahoe</code> object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tahoe = &#123;</span><br><span class="line">  resorts: [<span class="string">"Kirkwood"</span>,<span class="string">"Squaw"</span>,<span class="string">"Alpine"</span>,<span class="string">"Heavenly"</span>,<span class="string">"Northstar"</span>],</span><br><span class="line">  print: <span class="function"><span class="keyword">function</span>(<span class="params">delay=<span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.resorts.join(<span class="string">","</span>))</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tahoe.print() <span class="comment">// Cannot read property 'join' of undefined</span></span><br></pre></td></tr></table></figure><p>This error is thrown because it’s trying to use the <code>.join</code> method on what <code>this</code> is. In this case, it’s the window object. Alternatively, we can use the arrow function syntax to protect the scope of <code>this</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tahoe = &#123;</span><br><span class="line">  resorts: [<span class="string">"Kirkwood"</span>,<span class="string">"Squaw"</span>,<span class="string">"Alpine"</span>,<span class="string">"Heavenly"</span>,<span class="string">"Northstar"</span>],</span><br><span class="line">  print: <span class="function"><span class="keyword">function</span>(<span class="params">delay=<span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.resorts.join(<span class="string">","</span>))</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tahoe.print() <span class="comment">// Kirkwood, Squaw, Alpine, Heavenly, Northstar</span></span><br></pre></td></tr></table></figure><p>This works correctly and we can <code>.join</code> the resorts with a comma. Be careful, though, that you’re always keeping scope in mind. Arrow functions do not block off the scope of <code>this</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tahoe = &#123;</span><br><span class="line">  resorts: [<span class="string">"Kirkwood"</span>,<span class="string">"Squaw"</span>,<span class="string">"Alpine"</span>,<span class="string">"Heavenly"</span>,<span class="string">"Northstar"</span>],</span><br><span class="line">  print: <span class="function">(<span class="params">delay=<span class="number">1000</span></span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.resorts.join(<span class="string">","</span>))</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tahoe.print() <span class="comment">// Cannot read property resorts of undefined</span></span><br></pre></td></tr></table></figure><p>Changing the <code>print</code> function to an arrow function means that <code>this</code> is actually the window.</p><p>To verify, let’s change the console message to evaluate whether this is the window:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tahoe = &#123;</span><br><span class="line">  resorts: [<span class="string">"Kirkwood"</span>,<span class="string">"Squaw"</span>,<span class="string">"Alpine"</span>,<span class="string">"Heavenly"</span>,<span class="string">"Northstar"</span>],</span><br><span class="line">  print: <span class="function">(<span class="params">delay=<span class="number">1000</span></span>)=&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tahoe.print()</span><br></pre></td></tr></table></figure><p>It evaluates as <code>true</code>. To fix this, we can use a regular function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tahoe = &#123;</span><br><span class="line">  resorts: [<span class="string">"Kirkwood"</span>,<span class="string">"Squaw"</span>,<span class="string">"Alpine"</span>,<span class="string">"Heavenly"</span>,<span class="string">"Northstar"</span>],</span><br><span class="line">  print: <span class="function"><span class="keyword">function</span>(<span class="params">delay=<span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tahoe.print() <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="Transpiling-ES6"><a href="#Transpiling-ES6" class="headerlink" title="Transpiling ES6"></a>Transpiling ES6</h1><p>Not all web browsers support ES6, and even those that do don’t support everything. The only way to be sure that your ES6 code will work is to convert it to ES5 code before running it in the browser. This process is called <em>transpiling</em>. One of the most popular tools for transpiling is <a href="http://www.babeljs.io/" target="_blank" rel="noopener">Babel</a>.</p><p>In the past, the only way to use the latest JavaScript features was to wait weeks, months, or even years until browsers supported them. Now, transpiling has made it possible to use the latest features of JavaScript right away. The transpiling step makes JavaScript similar to other languages. Transpiling is not compiling: our code isn’t compiled to binary. Instead, it’s transpiled into syntax that can be interpreted by a wider range of browsers. Also, JavaScript now has source code, meaning that there will be some files that belong to your project that don’t run in the browser.</p><p>Below shows some ES6 code. We have an arrow function, already covered, mixed with some default arguments for <code>x</code> and <code>y</code>.</p><h5 id="Example-ES6-code-before-Babel-transpiling"><a href="#Example-ES6-code-before-Babel-transpiling" class="headerlink" title="Example: ES6 code before Babel transpiling"></a>Example: ES6 code before Babel transpiling</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x=<span class="number">5</span>, y=<span class="number">10</span></span>) =&gt;</span> <span class="built_in">console</span>.log(x+y);</span><br></pre></td></tr></table></figure><p>After we run the transpiler on this code, here is what the output will look like:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">arguments</span>.length &lt;= <span class="number">0</span> || <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="literal">undefined</span> ? </span><br><span class="line">        <span class="number">5</span> : <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">arguments</span>.length &lt;= <span class="number">1</span> || <span class="built_in">arguments</span>[<span class="number">1</span>] === <span class="literal">undefined</span> ? </span><br><span class="line">        <span class="number">10</span> : <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The transpiler added a “use strict” declaration to run in strict mode. The variables <code>x</code> and <code>y</code> are defaulted using the <code>arguments</code> array, a technique you may be familiar with. The resulting JavaScript is more widely supported.</p><p>You can transpile JavaScript directly in the browser using the inline Babel transpiler. You just include the <em>browser.js</em> file, and any scripts with <code>type=&quot;text/babel&quot;</code> will be converted (even though Babel 6 is the current version of Babel, only the CDN for Babel 5 will work):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script </span><br><span class="line">    src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.js"</span>&gt; </span><br><span class="line">&lt;<span class="regexp">/script&gt; </span></span><br><span class="line"><span class="regexp">&lt;script src="script.js" type="text/</span>babel<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="TRANSPILING-IN-THE-BROWSER"><a href="#TRANSPILING-IN-THE-BROWSER" class="headerlink" title="TRANSPILING IN THE BROWSER"></a>TRANSPILING IN THE BROWSER</h1><p>This approach means that the browser does the transpiling at runtime. This is not a good idea for production because it will slow your application down a lot. For now, the CDN link will allow us to discover and use ES6 features.</p><p>You may be thinking to yourself: “Great! When ES6 is supported by all browsers, we won’t have to use Babel anymore!” However, by the time this happens, we will want to use features of the next version of the spec. Unless a tectonic shift occurs, we’ll likely be using Babel in the foreseeable future.</p><h1 id="ES6-Objects-and-Arrays"><a href="#ES6-Objects-and-Arrays" class="headerlink" title="ES6 Objects and Arrays"></a>ES6 Objects and Arrays</h1><p>ES6 gives us new ways for working with objects and arrays and for scoping the variables within these datasets. These features include destructuring, object literal enhancement, and the spread operator.</p><h2 id="Destructuring-Assignment"><a href="#Destructuring-Assignment" class="headerlink" title="Destructuring Assignment"></a>Destructuring Assignment</h2><p>The destructuring assignment allows you to locally scope fields within an object and to declare which values will be used.</p><p>Consider this <code>sandwich</code> object. It has four keys, but we only want to use the values of two. We can scope <code>bread</code> and <code>meat</code> to be used locally:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sandwich =  &#123;</span><br><span class="line">      bread: <span class="string">"dutch crunch"</span>,</span><br><span class="line">      meat: <span class="string">"tuna"</span>,</span><br><span class="line">      cheese: <span class="string">"swiss"</span>,</span><br><span class="line">      toppings: [<span class="string">"lettuce"</span>, <span class="string">"tomato"</span>, <span class="string">"mustard"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;bread, meat&#125; = sandwich</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bread, meat) <span class="comment">// dutch crunch tuna</span></span><br></pre></td></tr></table></figure><p>The code pulls <code>bread</code> and <code>meat</code> out of the object and creates local variables for them. Also, the <code>bread</code> and <code>meat</code> variables can be changed:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;bread, meat&#125; = sandwich</span><br><span class="line"></span><br><span class="line">bread = <span class="string">"garlic"</span></span><br><span class="line">meat = <span class="string">"turkey"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bread) <span class="comment">// garlic</span></span><br><span class="line"><span class="built_in">console</span>.log(meat) <span class="comment">// turkey</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sandwich.bread, sandwich.meat) <span class="comment">// dutch crunch tuna</span></span><br></pre></td></tr></table></figure><p>We can also destructure incoming function arguments. Consider this function that would log a person’s name as a lord:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lordify = <span class="function"><span class="params">regularPerson</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;regularPerson.firstname&#125;</span> of Canterbury`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> regularPerson = &#123;</span><br><span class="line">  firstname: <span class="string">"Bill"</span>,</span><br><span class="line">  lastname: <span class="string">"Wilson"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lordify(regularPerson)       <span class="comment">// Bill of Canterbury</span></span><br></pre></td></tr></table></figure><p>Instead of using dot notation syntax to dig into objects, we can destructure the values that we need out of <code>regularPerson</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lordify = <span class="function">(<span class="params">&#123;firstname&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;firstname&#125;</span> of Canterbury`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lordify(regularPerson)      <span class="comment">// Bill of Canterbury</span></span><br></pre></td></tr></table></figure><p>Destructuring is also more declarative, meaning that our code is more descriptive about what we are trying to accomplish. By destructuring <code>firstname</code>, we declare that we will only use the <code>firstname</code> variable. We’ll cover more on declarative programming in the next chapter.</p><p>Values can also be destructured from arrays. Imagine that we wanted to assign the first value of an array to a variable name:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [firstResort] = [<span class="string">"Kirkwood"</span>, <span class="string">"Squaw"</span>, <span class="string">"Alpine"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstResort) <span class="comment">// Kirkwood</span></span><br></pre></td></tr></table></figure><p>We can also pass over unnecessary values with <em>list matching</em> using commas. List matching occurs when commas take the place of elements that should be skipped. With the same array, we can access the last value by replacing the first two values with commas:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [,,thirdResort] = [<span class="string">"Kirkwood"</span>, <span class="string">"Squaw"</span>, <span class="string">"Alpine"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(thirdResort) <span class="comment">// Alpine</span></span><br></pre></td></tr></table></figure><p>Later in this section, we’ll take this example a step further by combining array destructuring and the spread operator.</p><h2 id="Object-Literal-Enhancement"><a href="#Object-Literal-Enhancement" class="headerlink" title="Object Literal Enhancement"></a>Object Literal Enhancement</h2><p><em>Object literal enhancement</em> is the opposite of destructuring. It is the process of restructuring or putting back together. With object literal enhancement, we can grab variables from the global scope and turn them into an object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Tallac"</span></span><br><span class="line"><span class="keyword">var</span> elevation = <span class="number">9738</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funHike = &#123;name,elevation&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(funHike) <span class="comment">// &#123;name: "Tallac", elevation: 9738&#125;</span></span><br></pre></td></tr></table></figure><p><code>name</code> and <code>elevation</code> are now keys of the <code>funHike</code> object.</p><p>We can also create object methods with object literal enhancement or restructuring:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Tallac"</span></span><br><span class="line"><span class="keyword">var</span> elevation = <span class="number">9738</span></span><br><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Mt. <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is <span class="subst">$&#123;<span class="keyword">this</span>.elevation&#125;</span> feet tall`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funHike = &#123;name,elevation,print&#125;</span><br><span class="line"></span><br><span class="line">funHike.print()     <span class="comment">// Mt. Tallac is 9738 feet tall</span></span><br></pre></td></tr></table></figure><p>Notice we use <code>this</code> to access the object keys.</p><p>When defining object methods, it is no longer necessary to use the <code>function</code> keyword.</p><h5 id="Example-Old-versus-new-Object-syntax"><a href="#Example-Old-versus-new-Object-syntax" class="headerlink" title="Example: Old versus new: Object syntax"></a>Example: Old versus new: Object syntax</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OLD</span></span><br><span class="line"><span class="keyword">var</span> skier = &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    sound: sound,</span><br><span class="line">    powderYell: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> yell = <span class="keyword">this</span>.sound.toUpperCase()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;yell&#125;</span> <span class="subst">$&#123;yell&#125;</span> <span class="subst">$&#123;yell&#125;</span>!!!`</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    speed: <span class="function"><span class="keyword">function</span>(<span class="params">mph</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.speed = mph</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'speed:'</span>, mph)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NEW</span></span><br><span class="line"><span class="keyword">const</span> skier = &#123;</span><br><span class="line">    name,</span><br><span class="line">    sound,</span><br><span class="line">    powderYell() &#123;</span><br><span class="line">        <span class="keyword">let</span> yell = <span class="keyword">this</span>.sound.toUpperCase()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;yell&#125;</span> <span class="subst">$&#123;yell&#125;</span> <span class="subst">$&#123;yell&#125;</span>!!!`</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    speed(mph) &#123;</span><br><span class="line">        <span class="keyword">this</span>.speed = mph</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'speed:'</span>, mph)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object literal enhancement allows us to pull global variables into objects and reduces typing by making the <code>function</code> keyword unnecessary.</p><h2 id="The-Spread-Operator"><a href="#The-Spread-Operator" class="headerlink" title="The Spread Operator"></a>The Spread Operator</h2><p>The spread operator is three dots (<code>...</code>) that perform several different tasks. First, the spread operator allows us to combine the contents of arrays. For example, if we had two arrays, we could make a third array that combines the two arrays into one:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peaks = [<span class="string">"Tallac"</span>, <span class="string">"Ralston"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="keyword">var</span> canyons = [<span class="string">"Ward"</span>, <span class="string">"Blackwood"</span>]</span><br><span class="line"><span class="keyword">var</span> tahoe = [...peaks, ...canyons]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tahoe.join(<span class="string">', '</span>))  <span class="comment">// Tallac, Ralston, Rose, Ward, Blackwood</span></span><br></pre></td></tr></table></figure><p>All of the items from <code>peaks</code> and <code>canyons</code> are pushed into a new array called <code>tahoe</code>.</p><p>Let’s take a look at how the spread operator can help us deal with a problem. Using the <code>peaks</code> array from the previous sample, let’s imagine that we wanted to grab the last item from the array rather than the first. We could use the <code>Array.reverse</code> method to reverse the array in combination with array destructuring:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peaks = [<span class="string">"Tallac"</span>, <span class="string">"Ralston"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="keyword">var</span> [last] = peaks.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(last) <span class="comment">// Rose</span></span><br><span class="line"><span class="built_in">console</span>.log(peaks.join(<span class="string">', '</span>))  <span class="comment">// Rose, Ralston, Tallac</span></span><br></pre></td></tr></table></figure><p>See what happened? The <code>reverse</code> function has actually altered or mutated the array. In a world with the spread operator, we don’t have to mutate the original array; we can create a copy of the array and then reverse it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peaks = [<span class="string">"Tallac"</span>, <span class="string">"Ralston"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="keyword">var</span> [last] = [...peaks].reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(last) <span class="comment">// Rose</span></span><br><span class="line"><span class="built_in">console</span>.log(peaks.join(<span class="string">', '</span>))  <span class="comment">// Tallac, Ralston, Rose</span></span><br></pre></td></tr></table></figure><p>Since we used the spread operator to copy the array, the <code>peaks</code> array is still intact and can be used later in its original form.</p><p>The spread operator can also be used to get some, or the rest, of the items in the array:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lakes = [<span class="string">"Donner"</span>, <span class="string">"Marlette"</span>, <span class="string">"Fallen Leaf"</span>, <span class="string">"Cascade"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [first, ...rest] = lakes</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rest.join(<span class="string">", "</span>)) <span class="comment">// "Marlette, Fallen Leaf, Cascade"</span></span><br></pre></td></tr></table></figure><p>We can also use the spread operator to collect function arguments as an array. Here, we build a function that takes in <em>n </em>number of arguments using the spread operator, and then uses those arguments to print some console messages:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">directions</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> [start, ...remaining] = args</span><br><span class="line">  <span class="keyword">var</span> [finish, ...stops] = remaining.reverse()</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`drive through <span class="subst">$&#123;args.length&#125;</span> towns`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start in <span class="subst">$&#123;start&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`the destination is <span class="subst">$&#123;finish&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`stopping <span class="subst">$&#123;stops.length&#125;</span> times in between`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">directions(</span><br><span class="line">    <span class="string">"Truckee"</span>, </span><br><span class="line">    <span class="string">"Tahoe City"</span>, </span><br><span class="line">    <span class="string">"Sunnyside"</span>, </span><br><span class="line">    <span class="string">"Homewood"</span>, </span><br><span class="line">    <span class="string">"Tahoma"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The <code>directions</code> function takes in the arguments using the spread operator. The first argument is assigned to the <code>start</code> variable. The last argument is assigned to a <code>finish</code> variable using <code>Array.reverse</code>. We then use the length of the <code>arguments</code> array to display how many towns we’re going through. The number of stops is the length of the <code>arguments</code> array minus the <code>finish</code> stop. This provides incredible flexibility because we could use the <code>directions</code> function to handle any number of stops.</p><p>The spread operator can also be used for objects. Using the spread operator with objects is similar to using it with arrays. In this example, we’ll use it the same way we combined two arrays into a third array, but instead of arrays, we’ll use objects:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> morning = &#123;</span><br><span class="line">  breakfast: <span class="string">"oatmeal"</span>,</span><br><span class="line">  lunch: <span class="string">"peanut butter and jelly"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dinner = <span class="string">"mac and cheese"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> backpackingMeals = &#123;</span><br><span class="line">  ...morning,</span><br><span class="line">  dinner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(backpackingMeals) <span class="comment">// &#123;breakfast: "oatmeal",</span></span><br><span class="line">                                  lunch: <span class="string">"peanut butter and jelly"</span>,</span><br><span class="line">                                  dinner: <span class="string">"mac and cheese"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h1><p><em>Promises</em> give us a way to make sense out of asynchronous behavior. When making an asynchronous request, one of two things can happen: everything goes as we hope or there’s an error. There may be several different types of successful or unsuccessful requests. For example, we could try several ways to obtain the data to reach success. We could also receive multiple types of errors. Promises give us a way to simplify back to a simple pass or fail.</p><p>Let’s create an asynchronous promise for loading data from the <em>randomuser.me</em> API. This API has information like email address, name, phone number, location, and so on for fake members and is great to use as dummy data.</p><p>The <code>getFakeMembers</code> function returns a new promise. The promise makes a request to the API. If the promise is successful, the data will load. If the promise is unsuccessful, an error will occur:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getFakeMembers = <span class="function"><span class="params">count</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolves, rejects</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> api = <span class="string">`https://api.randomuser.me/?nat=US&amp;results=<span class="subst">$&#123;count&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(<span class="string">'GET'</span>, api)</span><br><span class="line">  request.onload = <span class="function"><span class="params">()</span> =&gt;</span> </span><br><span class="line">       (request.status === <span class="number">200</span>) ? </span><br><span class="line">        resolves(<span class="built_in">JSON</span>.parse(request.response).results) : </span><br><span class="line">        reject(<span class="built_in">Error</span>(request.statusText))</span><br><span class="line">  request.onerror = <span class="function">(<span class="params">err</span>) =&gt;</span> rejects(err)</span><br><span class="line">  request.send()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>With that, the promise has been created, but it hasn’t been used yet. We can use the promise by calling the <code>getFakeMembers</code> function and passing in the number of members that should be loaded. The <code>then</code> function can be chained on to do something once the promise has been fulfilled. This is called composition. We’ll also use an additional callback that handles errors:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getFakeMembers(<span class="number">5</span>).then(</span><br><span class="line">  members =&gt; <span class="built_in">console</span>.log(members),</span><br><span class="line">  err =&gt; <span class="built_in">console</span>.error(</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"cannot load members from randomuser.me"</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Promises make dealing with asynchronous requests easier, which is good, because we have to deal with a lot of asynchronous data in JavaScript. You’ll also see promises used heavily in Node.js, so a solid understanding of promises is essential for the modern JavaScript engineer.</p><h1 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h1><p>Previously in JavaScript, there were no official classes. Types were defined by functions. We had to create a function and then define methods on the function object using the prototype:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vacation</span>(<span class="params">destination, length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.destination = destination</span><br><span class="line">  <span class="keyword">this</span>.length = length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vacation.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.destination + <span class="string">" | "</span> + <span class="keyword">this</span>.length + <span class="string">" days"</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maui = <span class="keyword">new</span> Vacation(<span class="string">"Maui"</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">maui.print(); <span class="comment">// Maui | 7</span></span><br></pre></td></tr></table></figure><p>If you were used to classical object orientation, this probably made you mad.</p><p>ES6 introduces class declaration, but JavaScript still works the same way. Functions are objects, and inheritance is handled through the prototype, but this syntax makes more sense if you come from classical object orientation:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vacation</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(destination, length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.destination = destination</span><br><span class="line">    <span class="keyword">this</span>.length = length</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.destination&#125;</span> will take <span class="subst">$&#123;<span class="keyword">this</span>.length&#125;</span> days.`</span>)  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CAPITALIZATION-CONVENTIONS"><a href="#CAPITALIZATION-CONVENTIONS" class="headerlink" title="CAPITALIZATION CONVENTIONS"></a>CAPITALIZATION CONVENTIONS</h1><p>The rule of thumb with capitalization is that all types should be capitalized. Due to that, we will capitalize all class names.</p><p>Once you’ve created the class, you can create a new instance of the class using the <code>new</code> keyword. Then you can call the custom method on the class:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trip = <span class="keyword">new</span> Vacation(<span class="string">"Santiago, Chile"</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(trip.print()); <span class="comment">// Chile will take 7 days.</span></span><br></pre></td></tr></table></figure><p>Now that a class object has been created, you can use it as many times as you’d like to create new vacation instances. Classes can also be extended. When a class is extended, the subclass inherits the properties and methods of the superclass. These properties and methods can be manipulated from here, but as a default, all will be inherited.</p><p>You can use <code>Vacation</code> as an abstract class to create different types of vacations. For instance, an <code>Expedition</code> can extend the <code>Vacation</code> class to include gear:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expedition</span> <span class="keyword">extends</span> <span class="title">Vacation</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(destination, length, gear) &#123;</span><br><span class="line">   <span class="keyword">super</span>(destination, length)</span><br><span class="line">   <span class="keyword">this</span>.gear = gear</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="keyword">super</span>.print()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Bring your <span class="subst">$&#123;<span class="keyword">this</span>.gear.join(<span class="string">" and your "</span>)&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s simple inheritance: the subclass inherits the properties of the superclass. By calling the <code>printDetails</code> method of <code>Vacation</code>, we can append some new content onto what is printed in the <code>printDetails</code> method of <code>Expedition</code>. Creating a new instance works the exact same way—create a variable and use the <code>new</code> keyword:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trip = <span class="keyword">new</span> Expedition(<span class="string">"Mt. Whitney"</span>, <span class="number">3</span>, </span><br><span class="line">                     [<span class="string">"sunglasses"</span>, <span class="string">"prayer flags"</span>, <span class="string">"camera"</span>])</span><br><span class="line"></span><br><span class="line">trip.print() </span><br><span class="line"></span><br><span class="line"><span class="comment">// Mt. Whitney will take 3 days. </span></span><br><span class="line"><span class="comment">// Bring your sunglasses and your prayer flags and your camera</span></span><br></pre></td></tr></table></figure><h1 id="CLASSES-AND-PROTOTYPAL-INHERITANCE"><a href="#CLASSES-AND-PROTOTYPAL-INHERITANCE" class="headerlink" title="CLASSES AND PROTOTYPAL INHERITANCE"></a>CLASSES AND PROTOTYPAL INHERITANCE</h1><p>Using a class still means that you are using JavaScript’s prototypal inheritance. Log <code>Vacation.prototype</code>, and you’ll notice the constructor and <code>printDetails</code> methods on the prototype.</p><p>We will use classes a bit in this book, but we’re focusing on the functional paradigm. Classes have other features, like getters, setters, and static methods, but this book favors functional techniques over object-oriented techniques. The reason we’re introducing these is because we’ll use them later when creating React components.</p><h1 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h1><p>A JavaScript <em>module</em> is a piece of reusable code that can easily be incorporated into other JavaScript files. Until recently, the only way to work with modular JavaScript was to incorporate a library that could handle importing and exporting modules. Now, with ES6, JavaScript itself supports modules.</p><p>JavaScript modules are stored in separate files, one file per module. There are two options when creating and exporting a module: you can export multiple JavaScript objects from a single module, or one JavaScript object per module.</p><p>In <em>text-helpers.js</em>, the module and two functions are exported.</p><h5 id="Example-text-helpers-js"><a href="#Example-text-helpers-js" class="headerlink" title="Example: ./text-helpers.js"></a>Example: ./text-helpers.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> print(message) =&gt; log(message, <span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> log(message, timestamp) =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;timestamp.toString()&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>&#125;</span><br></pre></td></tr></table></figure><p><code>export</code> can be used to export any JavaScript type that will be consumed in another module. In this example the <code>print</code> function and <code>log</code> function are being exported. Any other variables declared in <em>text-helpers.js</em> will be local to that module.</p><p>Sometimes you may want to export only one variable from a module. In these cases you can use <code>export default</code>.</p><h5 id="Example-mt-freel-js"><a href="#Example-mt-freel-js" class="headerlink" title="Example: ./mt-freel.js"></a>Example: ./mt-freel.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> freel = <span class="keyword">new</span> Expedition(<span class="string">"Mt. Freel"</span>, <span class="number">2</span>, [<span class="string">"water"</span>, <span class="string">"snack"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> freel</span><br></pre></td></tr></table></figure><p><code>export default</code> can be used in place of <code>export</code> when you wish to export only one type. Again, both <code>export</code> and <code>export default</code> can be used on any JavaScript type: primitives, objects, arrays, and functions.</p><p>Modules can be consumed in other JavaScript files using the <code>import</code> statement. Modules with multiple exports can take advantage of object destructuring. Modules that use <code>export default</code> are imported into a single variable:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; print, log &#125; <span class="keyword">from</span> <span class="string">'./text-helpers'</span></span><br><span class="line"><span class="keyword">import</span> freel <span class="keyword">from</span> <span class="string">'./mt-freel'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'printing a message'</span>)</span><br><span class="line">log(<span class="string">'logging a message'</span>)</span><br><span class="line"></span><br><span class="line">freel.print()</span><br></pre></td></tr></table></figure><p>You can scope module variables locally under different variable names:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; print <span class="keyword">as</span> p, log <span class="keyword">as</span> l &#125; <span class="keyword">from</span> <span class="string">'./text-helpers'</span></span><br><span class="line"></span><br><span class="line">p(<span class="string">'printing a message'</span>)</span><br><span class="line">l(<span class="string">'logging a message'</span>)</span><br></pre></td></tr></table></figure><p>You can also import everything into a single variable using <code>*</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fns <span class="keyword">from</span> <span class="string">'./text-helpers</span></span><br></pre></td></tr></table></figure><p>ES6 modules are not yet fully supported by all browsers. Babel does support ES6 modules, so we will be using them throughout this book.</p><h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p>CommonJS is the module pattern that is supported by all versions of Node.js. You can still use these modules with Babel and webpack. With CommonJS, JavaScript objects are exported using <code>module.exports</code>.</p><h5 id="Example-txt-helpers-js"><a href="#Example-txt-helpers-js" class="headerlink" title="Example: ./txt-helpers.js"></a>Example: ./txt-helpers.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> print(message) =&gt; log(message, <span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log(message, timestamp) =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;timestamp.toString()&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;print, log&#125;</span><br></pre></td></tr></table></figure><p>CommonJS does not support an <code>import</code> statement. Instead, modules are imported with the <code>require</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; log, print &#125; = <span class="built_in">require</span>(<span class="string">'./txt-helpers'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Declaring-Variables-in-ES6&quot;&gt;&lt;a href=&quot;#Declaring-Variables-in-ES6&quot; class=&quot;headerlink&quot; title=&quot;Declaring Variables in ES6&quot;&gt;&lt;/a&gt;Declarin
      
    
    </summary>
    
    
      <category term="ES2015" scheme="https://wghglory.github.io/tags/ES2015/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter16 -- Production</title>
    <link href="https://wghglory.github.io/2017/05/18/angular2-chapter16/"/>
    <id>https://wghglory.github.io/2017/05/18/angular2-chapter16/</id>
    <published>2017-05-18T13:41:42.000Z</published>
    <updated>2017-11-22T15:33:20.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-to-Production"><a href="#Go-to-Production" class="headerlink" title="Go to Production"></a>Go to Production</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Tslint"><a href="#Tslint" class="headerlink" title="Tslint"></a>Tslint</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br><span class="line">npm i tslint -g     <span class="comment">#globally</span></span><br><span class="line">npm i tslint --save-dev     <span class="comment">#locally</span></span><br><span class="line">node_modules/.bin/tslint --init  <span class="comment">#locally</span></span><br></pre></td></tr></table></figure><p>List all errors:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tslint <span class="string">"app/**/*.ts"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: app/user/user.module.ts[8, 64]: Missing semicolon</span><br><span class="line">ERROR: app/user/user.module.ts[24, 18]: Missing trailing comma</span><br></pre></td></tr></table></figure><p>Fix all errors:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tslint <span class="string">"app/**/*.ts"</span> --fix</span><br></pre></td></tr></table></figure><h3 id="Tuning-Your-rxJS-Requests"><a href="#Tuning-Your-rxJS-Requests" class="headerlink" title="Tuning Your rxJS Requests"></a>Tuning Your rxJS Requests</h3><p>Now when running the project, you can see lots of useless requests involved Observable.js like NeverObservable.js, PairObservable.js, etc</p><p>voter.service.ts and other file, use Observable instead of Rx library</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span>;</span><br><span class="line">+ <span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br></pre></td></tr></table></figure><p>Now in auth.service.ts, some operation is not available (do, of, map)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.post(<span class="string">'/api/login'</span>, <span class="built_in">JSON</span>.stringify(loginInfo), options)</span><br><span class="line">    .do(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> &#123;&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.of(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>So we create rxjs-extension.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/throw'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/catch'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/do'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/filter'</span>;</span><br></pre></td></tr></table></figure><p>Now import this file to app.module.ts, afte this, “do, of, map” in auth.service.ts should not have errors</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./rxjs-extensions'</span>;</span><br></pre></td></tr></table></figure><p>Refresh browser and you can see requests number is much lesser.</p><h3 id="Enabling-Production-Mode"><a href="#Enabling-Production-Mode" class="headerlink" title="Enabling Production Mode"></a>Enabling Production Mode</h3><p>Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.</p><p>main.ts: based on environment.js, enableProdMode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line">enableProdMode();</span><br></pre></td></tr></table></figure><h3 id="Ahead-of-Time-Compiler-Overview"><a href="#Ahead-of-Time-Compiler-Overview" class="headerlink" title="Ahead of Time Compiler Overview"></a>Ahead of Time Compiler Overview</h3><p>AOT benefits:</p><ul><li>faster rendering</li><li>few requests</li><li>smaller angular framework</li><li>detect template errors</li><li>better security</li></ul><h5 id="JIT-vs-AOT"><a href="#JIT-vs-AOT" class="headerlink" title="JIT vs AOT:"></a>JIT vs AOT:</h5><p>When compiling Templates in development, angular use Just in time (JIT) compiler,<br>much of angular needed in browser is the complier.<br>It takes time to compile templates.</p><p>Production uses Ahead of time compiler</p><h5 id="AOT-no-no’s"><a href="#AOT-no-no’s" class="headerlink" title="AOT no-no’s"></a>AOT no-no’s</h5><ul><li>form.controls.controlName</li><li>control.errors?.someError</li><li>default exports</li><li>functions in providers, routes or declarations of a module</li><li>any filed used in a template, including inputs, must be public</li><li>declare var for globals</li></ul><h5 id="ES6-module-tree"><a href="#ES6-module-tree" class="headerlink" title="ES6 module tree"></a>ES6 module tree</h5><p>main.ts –&gt; app.module.ts –&gt; many component.ts, service.ts</p><h3 id="Preparing-for-the-AOT-Compiler"><a href="#Preparing-for-the-AOT-Compiler" class="headerlink" title="Preparing for the AOT Compiler"></a>Preparing for the AOT Compiler</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @angular/compiler-cli @angular/platform-server</span><br></pre></td></tr></table></figure><ol><li>create tsconfig-aot.json</li><li>create main-aot.ts</li><li>note now index.html is new aot html, index-jit is old one</li></ol><h3 id="Making-Coding-Fixes-for-the-AOT-Compiler"><a href="#Making-Coding-Fixes-for-the-AOT-Compiler" class="headerlink" title="Making Coding Fixes for the AOT Compiler"></a>Making Coding Fixes for the AOT Compiler</h3><p>create-event.component.ts now templateUrl is full path, AOT has to use relative path.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/events/create-event.component.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEventComponent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>update as below if using systemjs:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    moduleId: <span class="built_in">module</span>.id,</span><br><span class="line">    templateUrl: <span class="string">'create-event.component.html'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>update as below if using webpack:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    moduleId: <span class="built_in">module</span>.id,</span><br><span class="line">    templateUrl: <span class="string">'./create-event.component.html'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>handle 3rd party library:</p><p>app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- declare <span class="keyword">let</span> toastr: Toastr</span><br><span class="line">- declare <span class="keyword">let</span> jQuery: <span class="built_in">Object</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">let</span> toastr: Toastr = <span class="built_in">window</span>[<span class="string">'toastr'</span>];</span><br><span class="line">+ <span class="keyword">let</span> jQuery: <span class="built_in">Object</span> = <span class="built_in">window</span>[<span class="string">'$'</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Go-to-Production&quot;&gt;&lt;a href=&quot;#Go-to-Production&quot; class=&quot;headerlink&quot; title=&quot;Go to Production&quot;&gt;&lt;/a&gt;Go to Production&lt;/h1&gt;&lt;p&gt;Check code at:
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter15 -- Integration Testing</title>
    <link href="https://wghglory.github.io/2017/05/17/angular2-chapter15/"/>
    <id>https://wghglory.github.io/2017/05/17/angular2-chapter15/</id>
    <published>2017-05-17T07:46:22.000Z</published>
    <updated>2017-11-22T15:33:20.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test"></a>Integration Test</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><p>create session-list.component.Integrated.spec.ts</p><h3 id="Deep-Integration-Test"><a href="#Deep-Integration-Test" class="headerlink" title="Deep Integration Test"></a>Deep Integration Test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Deep Integration Test: import all child components with the parent component (SessionListComponent) you want to test */</span></span><br><span class="line"><span class="keyword">import</span> &#123;TestBed, <span class="keyword">async</span>, ComponentFixture&#125; <span class="keyword">from</span> <span class="string">"@angular/core/testing"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DebugElement&#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;UpvoteComponent&#125; <span class="keyword">from</span> <span class="string">'./upvote.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;SessionListComponent&#125; <span class="keyword">from</span> <span class="string">"./session-list.component"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">"../../user/auth.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;VoterService&#125; <span class="keyword">from</span> <span class="string">"./voter.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISession&#125; <span class="keyword">from</span> <span class="string">"../shared/event.model"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;By&#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DurationPipe &#125; <span class="keyword">from</span> <span class="string">'../shared/duration.pipe'</span></span><br><span class="line"><span class="keyword">import</span> &#123;CollapsibleWellComponent&#125; <span class="keyword">from</span> <span class="string">"../../common/collapsible-well.component"</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'SessionListComponent'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;SessionListComponent&gt;,</span><br><span class="line">        component: SessionListComponent,</span><br><span class="line">        element: HTMLElement,</span><br><span class="line">        debugEl: DebugElement</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mockAuthService = &#123;</span><br><span class="line">            isAuthenticated: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">            currentUser: &#123; <span class="attr">userName</span>: <span class="string">'Joe'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> mockVoterService = &#123;</span><br><span class="line">            userHasVoted: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TestBed.configureTestingModule(&#123;</span><br><span class="line">            imports: [],</span><br><span class="line">            declarations: [</span><br><span class="line">                SessionListComponent,</span><br><span class="line">                UpvoteComponent,</span><br><span class="line">                DurationPipe,</span><br><span class="line">                CollapsibleWellComponent</span><br><span class="line">            ],</span><br><span class="line">            providers: [</span><br><span class="line">                &#123; <span class="attr">provide</span>: AuthService, <span class="attr">useValue</span>: mockAuthService &#125;,</span><br><span class="line">                &#123; <span class="attr">provide</span>: VoterService, <span class="attr">useValue</span>: mockVoterService &#125;,</span><br><span class="line">            ],</span><br><span class="line">            schemas: []</span><br><span class="line">        &#125;).compileComponents();  <span class="comment">//webpack doesn't need call it, but systemJS needs</span></span><br><span class="line"></span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fixture = TestBed.createComponent(SessionListComponent);</span><br><span class="line">        component = fixture.componentInstance;</span><br><span class="line">        debugEl = fixture.debugElement;</span><br><span class="line">        element = fixture.nativeElement;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'initial display'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should have the correct session title'</span>, () =&gt; &#123;</span><br><span class="line">            component.sessions = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'Session 1'</span>, <span class="attr">presenter</span>: <span class="string">'Joe'</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">level</span>: <span class="string">'beginner'</span>, <span class="attr">abstract</span>: <span class="string">'abstract'</span>, <span class="attr">voters</span>: [<span class="string">'john'</span>, <span class="string">'bob'</span>] &#125;];</span><br><span class="line"></span><br><span class="line">            component.filterBy = <span class="string">'all'</span></span><br><span class="line">            component.sortBy = <span class="string">'name'</span></span><br><span class="line">            component.eventId = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            component.ngOnChanges();</span><br><span class="line">            fixture.detectChanges()</span><br><span class="line"></span><br><span class="line">            expect(element.querySelector(<span class="string">'[well-title]'</span>).textContent).toContain(<span class="string">'Session 1'</span>)</span><br><span class="line">            <span class="comment">//or</span></span><br><span class="line">            expect(debugEl.query(By.css(<span class="string">'[well-title]'</span>)).nativeElement.textContent).toContain(<span class="string">'Session 1'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Shallow-Integration-Test"><a href="#Shallow-Integration-Test" class="headerlink" title="Shallow Integration Test"></a>Shallow Integration Test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Shallow Integration Test: Don't bring child components, but create component with same api */</span></span><br><span class="line"><span class="keyword">import</span> &#123;TestBed, <span class="keyword">async</span>, ComponentFixture&#125; <span class="keyword">from</span> <span class="string">"@angular/core/testing"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DebugElement, Component, NO_ERRORS_SCHEMA&#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span>;</span><br><span class="line"><span class="comment">// import &#123;UpvoteComponent&#125; from './upvote.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;SessionListComponent&#125; <span class="keyword">from</span> <span class="string">"./session-list.component"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">"../../user/auth.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;VoterService&#125; <span class="keyword">from</span> <span class="string">"./voter.service"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISession&#125; <span class="keyword">from</span> <span class="string">"../shared/event.model"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;By&#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DurationPipe &#125; <span class="keyword">from</span> <span class="string">'../shared/duration.pipe'</span></span><br><span class="line"><span class="comment">// import &#123;CollapsibleWellComponent&#125; from "../../common/collapsible-well.component";</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'SessionListComponent'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;SessionListComponent&gt;,</span><br><span class="line">        component: SessionListComponent,</span><br><span class="line">        element: HTMLElement,</span><br><span class="line">        debugEl: DebugElement</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mockAuthService = &#123;</span><br><span class="line">            isAuthenticated: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">            currentUser: &#123; <span class="attr">userName</span>: <span class="string">'Joe'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> mockVoterService = &#123;</span><br><span class="line">            userHasVoted: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TestBed.configureTestingModule(&#123;</span><br><span class="line">            imports: [],</span><br><span class="line">            declarations: [</span><br><span class="line">                SessionListComponent,</span><br><span class="line">                <span class="comment">// UpvoteComponent,</span></span><br><span class="line">                DurationPipe,</span><br><span class="line">                <span class="comment">// CollapsibleWellComponent</span></span><br><span class="line">            ],</span><br><span class="line">            providers: [</span><br><span class="line">                &#123; <span class="attr">provide</span>: AuthService, <span class="attr">useValue</span>: mockAuthService &#125;,</span><br><span class="line">                &#123; <span class="attr">provide</span>: VoterService, <span class="attr">useValue</span>: mockVoterService &#125;,</span><br><span class="line">            ],</span><br><span class="line">            schemas: [NO_ERRORS_SCHEMA]  <span class="comment">//angular won't complain for non-stardard html tag, e.g. &lt;upVote&gt;</span></span><br><span class="line">        &#125;).compileComponents();  <span class="comment">//webpack doesn't need call it, but systemJS needs</span></span><br><span class="line"></span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fixture = TestBed.createComponent(SessionListComponent);</span><br><span class="line">        component = fixture.componentInstance;</span><br><span class="line">        debugEl = fixture.debugElement;</span><br><span class="line">        element = fixture.nativeElement;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'initial display'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should have the correct session title'</span>, () =&gt; &#123;</span><br><span class="line">            component.sessions = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'Session 1'</span>, <span class="attr">presenter</span>: <span class="string">'Joe'</span>, <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">level</span>: <span class="string">'beginner'</span>, <span class="attr">abstract</span>: <span class="string">'abstract'</span>, <span class="attr">voters</span>: [<span class="string">'john'</span>, <span class="string">'bob'</span>] &#125;];</span><br><span class="line"></span><br><span class="line">            component.filterBy = <span class="string">'all'</span></span><br><span class="line">            component.sortBy = <span class="string">'name'</span></span><br><span class="line">            component.eventId = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            component.ngOnChanges();</span><br><span class="line">            fixture.detectChanges()</span><br><span class="line"></span><br><span class="line">            expect(element.querySelector(<span class="string">'[well-title]'</span>).textContent).toContain(<span class="string">'Session 1'</span>)</span><br><span class="line">            <span class="comment">//or</span></span><br><span class="line">            expect(debugEl.query(By.css(<span class="string">'[well-title]'</span>)).nativeElement.textContent).toContain(<span class="string">'Session 1'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Integration-Test&quot;&gt;&lt;a href=&quot;#Integration-Test&quot; class=&quot;headerlink&quot; title=&quot;Integration Test&quot;&gt;&lt;/a&gt;Integration Test&lt;/h1&gt;&lt;p&gt;Check code at:
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter14 -- Unit Testing by Jasmine framework and Karma</title>
    <link href="https://wghglory.github.io/2017/05/15/angular2-chapter14/"/>
    <id>https://wghglory.github.io/2017/05/15/angular2-chapter14/</id>
    <published>2017-05-15T07:46:22.000Z</published>
    <updated>2017-11-22T15:33:20.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unit-Testing-by-Jasmine-framework-and-Karma"><a href="#Unit-Testing-by-Jasmine-framework-and-Karma" class="headerlink" title="Unit Testing by Jasmine framework and Karma"></a>Unit Testing by Jasmine framework and Karma</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><p><code>npm install -g karma-cli</code></p><p>add karma.conf.js and karma-test-shim.js</p><h3 id="Test-VoterService-and-Mock-Calls"><a href="#Test-VoterService-and-Mock-Calls" class="headerlink" title="Test VoterService and Mock Calls"></a>Test VoterService and Mock Calls</h3><p>create events/event-detail/voter.service.spec.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/event.model'</span></span><br><span class="line"><span class="keyword">import</span> &#123; VoterService &#125; <span class="keyword">from</span> <span class="string">'./voter.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'VoterService'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> voterService: VoterService,</span><br><span class="line">        mockHttp;</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        mockHttp = jasmine.createSpyObj(<span class="string">'mockHttp'</span>, [<span class="string">'delete'</span>, <span class="string">'post'</span>]);</span><br><span class="line">        voterService = <span class="keyword">new</span> VoterService(mockHttp);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'deleteVoter'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should remove the voter from voters list'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> session = &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">voters</span>: [<span class="string">'joe'</span>, <span class="string">'john'</span>] &#125;;</span><br><span class="line">            mockHttp.delete.and.returnValue(Observable.of(<span class="literal">false</span>));</span><br><span class="line">            voterService.deleteVoter(<span class="number">3</span>, &lt;ISession&gt;session, <span class="string">'joe'</span>);</span><br><span class="line"></span><br><span class="line">            expect(session.voters.length).toBe(<span class="number">1</span>)</span><br><span class="line">            expect(session.voters[<span class="number">0</span>]).toBe(<span class="string">'john'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        it(<span class="string">'should call http.delete with right url'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> session = &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">voters</span>: [<span class="string">'joe'</span>, <span class="string">'john'</span>] &#125;;</span><br><span class="line">            mockHttp.delete.and.returnValue(Observable.of(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">            voterService.deleteVoter(<span class="number">3</span>, &lt;ISession&gt;session, <span class="string">'joe'</span>);</span><br><span class="line"></span><br><span class="line">            expect(mockHttp.delete).toHaveBeenCalledWith(<span class="string">`/api/events/3/sessions/6/voters/joe`</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'addVoter'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should call http.post with right url'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> session = &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">voters</span>: [<span class="string">'john'</span>] &#125;;</span><br><span class="line">            mockHttp.post.and.returnValue(Observable.of(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">            voterService.addVoter(<span class="number">3</span>, &lt;ISession&gt;session, <span class="string">'joe'</span>);</span><br><span class="line"></span><br><span class="line">            expect(mockHttp.post).toHaveBeenCalledWith(<span class="string">`/api/events/3/sessions/6/voters/joe`</span>, <span class="string">'&#123;&#125;'</span>, jasmine.any(<span class="built_in">Object</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Run <code>karma start</code> and see result</p><h3 id="Testing-Components-with-Isolated-Tests"><a href="#Testing-Components-with-Isolated-Tests" class="headerlink" title="Testing Components with Isolated Tests"></a>Testing Components with Isolated Tests</h3><p>session-list.component.spec.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;SessionListComponent&#125; <span class="keyword">from</span> <span class="string">'./session-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ISession&#125; <span class="keyword">from</span> <span class="string">'../shared/event.model'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'SessionListComponent'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> component: SessionListComponent;</span><br><span class="line">    <span class="keyword">let</span> mockAuthService, mockVoterService</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        component = <span class="keyword">new</span> SessionListComponent(mockAuthService, mockVoterService)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'ngOnChanges'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        it(<span class="string">'should filter the sessions correctly'</span>, () =&gt; &#123;</span><br><span class="line">            component.sessions = <span class="xml"><span class="tag">&lt;<span class="name">ISession[]</span>&gt;</span>[</span></span><br><span class="line"><span class="xml">                &#123; name: 'session 1', level: 'intermediate' &#125;,</span></span><br><span class="line"><span class="xml">                &#123; name: 'session 2', level: 'intermediate' &#125;,</span></span><br><span class="line"><span class="xml">                &#123; name: 'session 3', level: 'beginner' &#125;,</span></span><br><span class="line"><span class="xml">            ];</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            component.filterBy = 'intermediate';</span></span><br><span class="line"><span class="xml">            component.sortBy = 'name';</span></span><br><span class="line"><span class="xml">            component.eventId = 3;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            component.ngOnChanges();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            expect(component.visibleSessions.length).toBe(2)</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        it('should sort the sessions correctly', () =&gt; &#123;</span></span><br><span class="line">            component.sessions = &lt;ISession[]&gt;[</span><br><span class="line">                &#123; name: 'session 1', level: 'intermediate' &#125;,</span><br><span class="line">                &#123; name: 'session 3', level: 'intermediate' &#125;,</span><br><span class="line">                &#123; name: 'session 2', level: 'beginner' &#125;,</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            component.filterBy = 'all';</span><br><span class="line">            component.sortBy = 'name';</span><br><span class="line">            component.eventId = 3;</span><br><span class="line"></span><br><span class="line">            component.ngOnChanges();</span><br><span class="line"></span><br><span class="line">            expect(component.visibleSessions[2].name).toBe('session 3')</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unit-Testing-by-Jasmine-framework-and-Karma&quot;&gt;&lt;a href=&quot;#Unit-Testing-by-Jasmine-framework-and-Karma&quot; class=&quot;headerlink&quot; title=&quot;Unit T
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter13 -- Communicating with the Server Using HTTP, Observables, and Rx</title>
    <link href="https://wghglory.github.io/2017/05/13/angular2-chapter13/"/>
    <id>https://wghglory.github.io/2017/05/13/angular2-chapter13/</id>
    <published>2017-05-13T11:41:42.000Z</published>
    <updated>2017-11-22T15:33:20.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Communicating-with-the-Server-Using-HTTP-Observables-and-Rx"><a href="#Communicating-with-the-Server-Using-HTTP-Observables-and-Rx" class="headerlink" title="Communicating with the Server Using HTTP, Observables, and Rx"></a>Communicating with the Server Using HTTP, Observables, and Rx</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Observable-features"><a href="#Observable-features" class="headerlink" title="Observable features"></a>Observable features</h3><ul><li>Can be Synchronous and Async</li><li>Impoved Error Handling</li><li>Can be closed independently of returning a value</li><li>Can deal with Time</li><li>Advanced Operations<ul><li>Mathmetical Aggregation</li><li>Buffering</li><li>Debounce</li><li>Distinct</li><li>Filtering</li><li>Combining Observables</li><li>Retry</li></ul></li></ul><h3 id="Observables-VS-Promise"><a href="#Observables-VS-Promise" class="headerlink" title="Observables VS Promise"></a>Observables VS Promise</h3><p>Promise:</p><ul><li>represent a single value in the future</li><li>Async</li></ul><p>Observables:</p><ul><li>represent 0 or more values now or in the future</li><li>both sync and async</li></ul><h3 id="HttpModule"><a href="#HttpModule" class="headerlink" title="HttpModule"></a>HttpModule</h3><p>app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123;HttpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [</span><br><span class="line">        BrowserModule,</span><br><span class="line">        RouterModule.forRoot(appRoutes),</span><br><span class="line">        FormsModule,</span><br><span class="line">        ReactiveFormsModule,</span><br><span class="line">+        HttpModule</span><br><span class="line">    ]&#125;)</span><br></pre></td></tr></table></figure><h3 id="EventService-Http"><a href="#EventService-Http" class="headerlink" title="EventService Http"></a>EventService Http</h3><blockquote><p>note: normally, http return Observable, there must be somewhere call subscribe() to return real data.<br>If we don’t need response data, probably call subscribe() immediately after the http.<br>Otherwise, call subscribe() when you call the service<br>Exception: when using resolver, subscribe is not needed (Eventlist and event-detail)</p></blockquote><p>event.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Subject, Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/RX'</span></span><br><span class="line"><span class="keyword">import</span> &#123; IEvent, ISession &#125; <span class="keyword">from</span> <span class="string">'./event.model'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Http, Response, Headers, RequestOptions &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private http: Http) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    getEvents(): Observable&lt;IEvent[]&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'/api/events'</span>).map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">IEvent[]</span>&gt;</span>res.json();</span></span><br><span class="line"><span class="xml">        &#125;).catch(this.handleError);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line">    getEvent(id: number): Observable&lt;IEvent&gt; &#123;</span><br><span class="line">        return this.http.get('/api/events/' + id).map((res: Response) =&gt; &#123;</span><br><span class="line">            return &lt;IEvent&gt;res.json();</span><br><span class="line">        &#125;).catch(this.handleError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveEvent(event): Observable&lt;IEvent&gt; &#123;</span><br><span class="line">        let headers = new Headers(&#123; 'Content-Type': 'applicaton/json' &#125;);</span><br><span class="line">        let options = new RequestOptions(&#123; headers: headers &#125;);</span><br><span class="line"></span><br><span class="line">        //put is exactly same code with post</span><br><span class="line">        return this.http.post('/api/events', JSON.stringify(event), options)</span><br><span class="line">            .map((res: Response) =&gt; &#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">                return res.json();</span><br><span class="line">            &#125;).catch(this.handleError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // move this to saveEvent, if id passes =&gt; update, no id =&gt; add</span><br><span class="line">    // updateEvent(event) &#123;</span><br><span class="line">    //     let index = EVENTS.findIndex(x =&gt; x.id == event.id)</span><br><span class="line">    //     EVENTS[index] = event</span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">    searchSessions(searchTerm: string) &#123;</span><br><span class="line">        return this.http.get('/api/sessions/search?search=' + searchTerm).map((res: Response) =&gt; &#123;</span><br><span class="line">            return res.json();</span><br><span class="line">        &#125;).catch(this.handleError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private handleError(err: Response) &#123;</span><br><span class="line">        return Observable.throw(err.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>event-list-resolver.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Resolve&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'./shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventListResolver</span> <span class="title">implements</span> <span class="title">Resolve</span>&lt;<span class="title">any</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService) &#123;    &#125;</span><br><span class="line"></span><br><span class="line">    resolve() &#123;</span><br><span class="line">        <span class="comment">// subscribe is not needed when calling the service in resolver</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.eventService.getEvents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>create events/event-resolver.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Resolve, ActivatedRouteSnapshot&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'./shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventResolver</span> <span class="title">implements</span> <span class="title">Resolve</span>&lt;<span class="title">any</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService) &#123;    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(route: ActivatedRouteSnapshot) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.eventService.getEvent(+route.params[<span class="string">'id'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>event-detail.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line">    <span class="comment">// //+ convert string to number</span></span><br><span class="line">    <span class="comment">// this.event = this.eventService.getEvent(+this.route.snapshot.params['id'])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// whenever route params changes, reset all the states</span></span><br><span class="line">    <span class="keyword">this</span>.route.data.forEach(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this.event = this.eventService.getEvent(+params['id']);  //sync</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //async, removed because we use EventResolver</span></span><br><span class="line">        <span class="comment">// this.eventService.getEvent(+params['id']).subscribe((e: IEvent) =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     this.event = e;</span></span><br><span class="line">        <span class="comment">//     this.addMode = false;</span></span><br><span class="line">        <span class="comment">//     this.filterBy = 'all';</span></span><br><span class="line">        <span class="comment">//     this.sortBy = 'votes';</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//async and use EventResolver</span></span><br><span class="line">        <span class="keyword">this</span>.event = data[<span class="string">'event'</span>];</span><br><span class="line">        <span class="keyword">this</span>.addMode = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.filterBy = <span class="string">'all'</span>;</span><br><span class="line">        <span class="keyword">this</span>.sortBy = <span class="string">'votes'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete event-route-activator.ts guard since we don’t want to call httprequrest twice, also delete any related code in module, route.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventRouteActivator</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    canActivate(route: ActivatedRouteSnapshot) &#123;</span><br><span class="line">        <span class="comment">//call twice</span></span><br><span class="line">        <span class="keyword">const</span> eventExists = !!<span class="keyword">this</span>.eventService.getEvent(+route.params[<span class="string">'id'</span>])  <span class="comment">//+ convert</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!eventExists)</span><br><span class="line">            <span class="keyword">this</span>.router.navigate([<span class="string">'/404'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> eventExists</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>modify route.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent, <span class="attr">resolve</span>: &#123; <span class="attr">event</span>: EventResolver &#125; &#125;, <span class="comment">//Guarding Against Route Activation using service</span></span><br></pre></td></tr></table></figure><p>create-event.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEventComponent</span> </span>&#123;</span><br><span class="line">    isDirty: boolean = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private router: Router, private eventService: EventService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'/events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveEvent(formValues) &#123;</span><br><span class="line">+        <span class="keyword">this</span>.eventService.saveEvent(formValues).subscribe(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">+            <span class="keyword">this</span>.isDirty = <span class="literal">false</span></span><br><span class="line">+            <span class="keyword">this</span>.router.navigate([<span class="string">'/events'</span>])</span><br><span class="line">+        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VoterService-Http"><a href="#VoterService-Http" class="headerlink" title="VoterService Http"></a>VoterService Http</h3><p>voter.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/event.model'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Http, Response, Headers, RequestOptions&#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">VoterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private http: Http) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    deleteVoter(eventId: number, <span class="attr">session</span>: ISession, <span class="attr">voterName</span>: string) &#123;</span><br><span class="line">        session.voters = session.voters.filter(<span class="function"><span class="params">v</span> =&gt;</span> v !== voterName);</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">`/api/events/<span class="subst">$&#123;eventId&#125;</span>/sessions/<span class="subst">$&#123;session.id&#125;</span>/voters/<span class="subst">$&#123;voterName&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.delete(url).catch(<span class="keyword">this</span>.handleError).subscribe();</span><br><span class="line">        <span class="comment">//when we don't care the returning result, use subscribe immediately is fine.</span></span><br><span class="line">        <span class="comment">//Otherwise it's better to call subscribe when you actually called the service.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addVoter(eventId: number, <span class="attr">session</span>: ISession, <span class="attr">voterName</span>: string) &#123;</span><br><span class="line">        session.voters.push(voterName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> headers = <span class="keyword">new</span> Headers(&#123; <span class="string">'Content-Type'</span>: <span class="string">'applicaton/json'</span> &#125;);</span><br><span class="line">        <span class="keyword">let</span> options = <span class="keyword">new</span> RequestOptions(&#123; <span class="attr">headers</span>: headers &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">`/api/events/<span class="subst">$&#123;eventId&#125;</span>/sessions/<span class="subst">$&#123;session.id&#125;</span>/voters/<span class="subst">$&#123;voterName&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put is exactly same code with post</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.post(url, <span class="built_in">JSON</span>.stringify(&#123;&#125;), options)</span><br><span class="line">            .map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.json();</span><br><span class="line">            &#125;).catch(<span class="keyword">this</span>.handleError).subscribe();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userHasVoted(session: ISession, <span class="attr">voterName</span>: string) &#123;</span><br><span class="line">        <span class="keyword">return</span> session.voters.some(<span class="function"><span class="params">v</span> =&gt;</span> v === voterName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private handleError(err: Response) &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.throw(err.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Login-Logout"><a href="#Login-Logout" class="headerlink" title="Login/Logout"></a>Login/Logout</h3><p>user/auth.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;IUser&#125; <span class="keyword">from</span> <span class="string">'./user.model'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123;Http, Response, Headers, RequestOptions&#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line">+    <span class="keyword">constructor</span>(private http: Http) &#123; &#125;</span><br><span class="line">    currentUser: IUser</span><br><span class="line"></span><br><span class="line">+    loginUser(userName: string, <span class="attr">password</span>: string) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> headers = <span class="keyword">new</span> Headers(&#123; <span class="string">'Content-Type'</span>: <span class="string">'applicaton/json'</span> &#125;);</span><br><span class="line">        <span class="keyword">let</span> options = <span class="keyword">new</span> RequestOptions(&#123; <span class="attr">headers</span>: headers &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> loginInfo = &#123; <span class="attr">username</span>: userName, <span class="attr">password</span>: password &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put is exactly same code with post</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.post(<span class="string">'/api/login'</span>, <span class="built_in">JSON</span>.stringify(loginInfo), options)</span><br><span class="line">            .do(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.currentUser = <span class="xml"><span class="tag">&lt;<span class="name">IUser</span>&gt;</span>res.json().user;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;).catch(err =&gt; &#123;</span></span><br><span class="line"><span class="xml">                return Observable.of(false);</span></span><br><span class="line"><span class="xml">            &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    isAuthenticated() &#123;</span></span><br><span class="line"><span class="xml">        return !!this.currentUser;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    updateCurrentUser(firstName: string, lastName: string) &#123;</span></span><br><span class="line"><span class="xml">+        this.currentUser.firstName = firstName;</span></span><br><span class="line"><span class="xml">        this.currentUser.lastName = lastName;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        let headers = new Headers(&#123; 'Content-Type': 'applicaton/json' &#125;);</span></span><br><span class="line"><span class="xml">        let options = new RequestOptions(&#123; headers: headers &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        return this.http.put(`/api/users/$&#123;this.currentUser.id&#125;`, JSON.stringify(this.currentUser), options);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    //persist user authentication status, call this is app.component.ts</span></span><br><span class="line"><span class="xml">+    checkAuthenticationStatus() &#123;</span></span><br><span class="line"><span class="xml">        return this.http.get('/api/currentIdentity').map((res: any) =&gt; &#123;</span></span><br><span class="line"><span class="xml">            if (res._body) &#123;</span></span><br><span class="line"><span class="xml">                return res.json()</span></span><br><span class="line"><span class="xml">            &#125; else &#123;</span></span><br><span class="line"><span class="xml">                return &#123;&#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;).do(currentUser =&gt; &#123;</span></span><br><span class="line"><span class="xml">            if (!!currentUser.userName) &#123;</span></span><br><span class="line"><span class="xml">                this.currentUser = currentUser;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;).subscribe();</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">+    logout() &#123;</span></span><br><span class="line"><span class="xml">        this.currentUser = undefined;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        let headers = new Headers(&#123; 'Content-Type': 'applicaton/json' &#125;);</span></span><br><span class="line"><span class="xml">        let options = new RequestOptions(&#123; headers: headers &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        return this.http.post('api/logout', JSON.stringify(&#123;&#125;), options);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>app.Component.ts: to persist authentication state, a logged in user should not type username/password within 20 min</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">'./user/auth.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-app'</span>,</span><br><span class="line">    template: <span class="string">`&lt;nav-bar&gt;&lt;/nav-bar&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private auth: AuthService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.auth.checkAuthenticationStatus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private authService: AuthService, private router: Router) &#123; &#125;</span><br><span class="line">+    loginInvalid: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">+    login(formValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.authService.loginUser(formValues.userName, formValues.password)</span><br><span class="line">            .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.loginInvalid = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>profile.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private authService: AuthService, private router: Router, @Inject(TOASTR_TOKEN) private toastr: Toastr) &#123; &#125;</span><br><span class="line"></span><br><span class="line">+    saveProfile(formValues) &#123;</span><br><span class="line">+        <span class="keyword">if</span> (<span class="keyword">this</span>.profileForm.valid) &#123;</span><br><span class="line">+            <span class="keyword">this</span>.authService.updateCurrentUser(formValues.firstName, formValues.lastName)</span><br><span class="line">+                .subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">+                    <span class="keyword">this</span>.toastr.success(<span class="string">'Profile saved successfully!'</span>)</span><br><span class="line">+                &#125;);</span><br><span class="line">+            <span class="comment">// this.router.navigate(['events'])</span></span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+    logout()&#123;</span><br><span class="line">+        <span class="keyword">this</span>.authService.logout().subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">+            <span class="keyword">this</span>.router.navigate([<span class="string">'/user/login'</span>]);</span><br><span class="line">+        &#125;);</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Communicating-with-the-Server-Using-HTTP-Observables-and-Rx&quot;&gt;&lt;a href=&quot;#Communicating-with-the-Server-Using-HTTP-Observables-and-Rx&quot; 
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter12 -- More Components and Custom Validators</title>
    <link href="https://wghglory.github.io/2017/05/10/angular2-chapter12/"/>
    <id>https://wghglory.github.io/2017/05/10/angular2-chapter12/</id>
    <published>2017-05-10T09:41:42.000Z</published>
    <updated>2017-11-22T15:33:20.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="More-Components-and-Custom-Validators"><a href="#More-Components-and-Custom-Validators" class="headerlink" title="More Components and Custom Validators"></a>More Components and Custom Validators</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><p>We can vote for sessions whatever user likes.</p><h3 id="Voter-function"><a href="#Voter-function" class="headerlink" title="Voter function"></a>Voter function</h3><p>1) events/event-detail/session-list.component.html add this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"auth.isAuthenticated()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">upvote</span> (<span class="attr">vote</span>)=<span class="string">"toggleVote(session)"</span> [<span class="attr">count</span>]=<span class="string">"session.voters.length"</span> [<span class="attr">voted</span>]=<span class="string">"userHasVoted(session)"</span>&gt;</span><span class="tag">&lt;/<span class="name">upvote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) events/event-detail/session-list.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input, OnChanges &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'../../user/auth.service'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; VoterService &#125; <span class="keyword">from</span> <span class="string">'./voter.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'session-list'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/events/event-detail/session-list.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListComponent</span> <span class="title">implements</span> <span class="title">OnChanges</span> </span>&#123;</span><br><span class="line">    @Input() sessions: ISession[]</span><br><span class="line">    @Input() filterBy: string</span><br><span class="line">    visibleSessions: ISession[] = [];</span><br><span class="line">    @Input() sortBy: string</span><br><span class="line"></span><br><span class="line">+    <span class="keyword">constructor</span>(private auth: AuthService, private voterService: VoterService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//whenever the input variable changes</span></span><br><span class="line">    ngOnChanges() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.sessions) &#123;</span><br><span class="line">            <span class="keyword">this</span>.filterSessions(<span class="keyword">this</span>.filterBy);</span><br><span class="line">            <span class="keyword">this</span>.sortBy === <span class="string">'name'</span> ? <span class="keyword">this</span>.visibleSessions.sort(sortByNameAsc) : <span class="keyword">this</span>.visibleSessions.sort(sortByVotesDesc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterSessions(filter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter === <span class="string">'all'</span>) &#123;</span><br><span class="line">            <span class="comment">// this.visibleSessions = this.sessions;  //wrong, we want to make a copy</span></span><br><span class="line">            <span class="keyword">this</span>.visibleSessions = <span class="keyword">this</span>.sessions.slice(<span class="number">0</span>);  <span class="comment">//clone the arr</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.visibleSessions = <span class="keyword">this</span>.sessions.filter(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.level.toLocaleLowerCase() == filter;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    toggleVote(session: ISession) &#123;</span><br><span class="line">+        <span class="keyword">if</span> (<span class="keyword">this</span>.userHasVoted(session)) &#123;</span><br><span class="line">+            <span class="keyword">this</span>.voterService.deleteVoter(session, <span class="keyword">this</span>.auth.currentUser.userName);</span><br><span class="line">+        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">+            <span class="keyword">this</span>.voterService.addVoter(session, <span class="keyword">this</span>.auth.currentUser.userName);</span><br><span class="line">+        &#125;</span><br><span class="line"></span><br><span class="line">+        <span class="keyword">if</span> (<span class="keyword">this</span>.sortBy === <span class="string">'votes'</span>) &#123;</span><br><span class="line">+            <span class="keyword">this</span>.visibleSessions.sort(sortByVotesDesc);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line">+    userHasVoted(session: ISession) &#123;</span><br><span class="line">+        <span class="keyword">return</span> <span class="keyword">this</span>.voterService.userHasVoted(session, <span class="keyword">this</span>.auth.currentUser.userName);</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByNameAsc</span>(<span class="params">s1: ISession, s2: ISession</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.name &gt; s2.name) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s1.name === s2.name) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByVotesDesc</span>(<span class="params">s1: ISession, s2: ISession</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s2.voters.length - s1.voters.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) add events/event-detail/upvote.component.ts, register in barrel and app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, EventEmitter, Input, Output &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'upvote'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="votingWidgetContainer pointable" (click)="onClick()"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="well votingWidget"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="votingButton"&gt;</span></span><br><span class="line"><span class="string">                &lt;i *ngIf="voted" class="glyphicon glyphicon-heart"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">                &lt;i *ngIf="!voted" class="glyphicon glyphicon-heart-empty"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="badge badge-inverse votingCount"&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">    styleUrls: [<span class="string">'/app/events/event-detail/upvote.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UpvoteComponent</span> </span>&#123;</span><br><span class="line">    @Input() count: number;</span><br><span class="line">    @Input() voted: boolean;</span><br><span class="line">    @Output() vote = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">    onClick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.vote.emit(&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) voter.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/event.model'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">VoterService</span> </span>&#123;</span><br><span class="line">    deleteVoter(session: ISession, <span class="attr">voterName</span>: string) &#123;</span><br><span class="line">        session.voters = session.voters.filter(<span class="function"><span class="params">v</span> =&gt;</span> v !== voterName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addVoter(session: ISession, <span class="attr">voterName</span>: string) &#123;</span><br><span class="line">        session.voters.push(voterName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userHasVoted(session: ISession, <span class="attr">voterName</span>: string) &#123;</span><br><span class="line">        <span class="keyword">return</span> session.voters.some(<span class="function"><span class="params">v</span> =&gt;</span> v === voterName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-feature-voted-red-color-unvoted-white-color"><a href="#Update-feature-voted-red-color-unvoted-white-color" class="headerlink" title="Update feature: voted red color, unvoted white color"></a>Update feature: voted red color, unvoted white color</h3><p><strong>Using @Input Setters</strong></p><p>upvote.component.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, EventEmitter, Input, Output &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'upvote'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="votingWidgetContainer pointable" (click)="onClick()"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="well votingWidget"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="votingButton"&gt;</span></span><br><span class="line"><span class="string">+                &lt;i [style.color]="iconColor" class="glyphicon glyphicon-heart"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">-                &lt;!--</span></span><br><span class="line"><span class="string">-                    &lt;i *ngIf="voted" class="glyphicon glyphicon-heart"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">-                    &lt;i *ngIf="!voted" class="glyphicon glyphicon-heart-empty"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">-                --&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="badge badge-inverse votingCount"&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">    styleUrls: [<span class="string">'/app/events/event-detail/upvote.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UpvoteComponent</span> </span>&#123;</span><br><span class="line">    @Input() count: number;</span><br><span class="line">+    iconColor: string;</span><br><span class="line">+    @Input() set voted(val) &#123;</span><br><span class="line">+        <span class="keyword">this</span>.iconColor = val ? <span class="string">'red'</span> : <span class="string">'white'</span>;</span><br><span class="line">+    &#125;</span><br><span class="line">    @Output() vote = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    onClick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.vote.emit(&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Creating-a-Complex-Custom-Validator"><a href="#Creating-a-Complex-Custom-Validator" class="headerlink" title="Creating a Complex Custom Validator"></a>Creating a Complex Custom Validator</h3><p>when user creates a new event, we want to make sure all 3 location fields or onlineUrl are typed.</p><p>location-validator.directive.ts, register it in barrel and app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Validator, FormGroup, NG_VALIDATORS &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[validateLocation]'</span>,</span><br><span class="line">    providers: [&#123; <span class="attr">provide</span>: NG_VALIDATORS, <span class="attr">useExisting</span>: LocationValidator, <span class="attr">multi</span>: <span class="literal">true</span> &#125;] <span class="comment">//use multi:true to add LocationValidator to NG_VALIDATORS which is a list of angular built-in validators, otherwise can replace/override</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationValidator</span> <span class="title">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    validate(formGroup: FormGroup): &#123; [key: string]: any &#125; &#123;</span><br><span class="line">        <span class="keyword">let</span> addressControl = formGroup.controls[<span class="string">'address'</span>];</span><br><span class="line">        <span class="keyword">let</span> cityControl = formGroup.controls[<span class="string">'city'</span>];</span><br><span class="line">        <span class="keyword">let</span> countryControl = formGroup.controls[<span class="string">'country'</span>];</span><br><span class="line">        <span class="keyword">let</span> onlineUrlControl = (<span class="xml"><span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span>formGroup.root).controls['onlineUrl'];</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        console.log(addressControl &amp;&amp; addressControl.value)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        if ((addressControl &amp;&amp; addressControl.value</span></span><br><span class="line"><span class="xml">            &amp;&amp; cityControl &amp;&amp; cityControl.value</span></span><br><span class="line"><span class="xml">            &amp;&amp; countryControl &amp;&amp; countryControl.value)</span></span><br><span class="line"><span class="xml">            || (onlineUrlControl &amp;&amp; onlineUrlControl.value)) &#123;</span></span><br><span class="line"><span class="xml">            return null;</span></span><br><span class="line"><span class="xml">        &#125; else &#123;</span></span><br><span class="line"><span class="xml">            return &#123; validateLocation: false &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>create-event.component.ts</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">newEventForm</span>=<span class="string">"ngForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"saveEvent(newEventForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line"></span><br><span class="line">+    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ngModelGroup</span>=<span class="string">"location"</span> <span class="attr">validateLocation</span> #<span class="attr">locationGroup</span>=<span class="string">"ngModelGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"address"</span>&gt;</span>Event Location:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"locationGroup?.invalid &amp;&amp; locationGroup?.touched"</span>&gt;</span>You must enter either flll location or online url<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"address"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Address of event..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"city"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"City..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"country"</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">id</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Country..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"onlineUrl"</span>&gt;</span>Online Url:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">input</span> (<span class="attr">change</span>)=<span class="string">"locationGroup.control.controls.address.updateValueAndValidity()"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"onlineUrl"</span> <span class="attr">name</span>=<span class="string">"onlineUrl"</span> <span class="attr">id</span>=<span class="string">"onlineUrl"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Online Url..."</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;More-Components-and-Custom-Validators&quot;&gt;&lt;a href=&quot;#More-Components-and-Custom-Validators&quot; class=&quot;headerlink&quot; title=&quot;More Components an
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter11 -- Create Directives and Advanced Component</title>
    <link href="https://wghglory.github.io/2017/05/09/angular2-chapter11/"/>
    <id>https://wghglory.github.io/2017/05/09/angular2-chapter11/</id>
    <published>2017-05-09T04:00:57.000Z</published>
    <updated>2017-11-22T15:33:20.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Create-Directives-and-Advanced-Component"><a href="#Create-Directives-and-Advanced-Component" class="headerlink" title="Create Directives and Advanced Component"></a>Create Directives and Advanced Component</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h2 id="Implementing-the-Session-Search"><a href="#Implementing-the-Session-Search" class="headerlink" title="Implementing the Session Search"></a>Implementing the Session Search</h2><p>Todo: implement logic for search session textbox, click search, modal window pops up showing sessions</p><p>nav.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">"searchSessions(searchTerm)"</span> <span class="attr">id</span>=<span class="string">"searchForm"</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"searchTerm"</span> <span class="attr">name</span>=<span class="string">"searchTerm"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search Sessions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>event.service.ts add searchSessions function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">searchSessions(searchTerm: string) &#123;</span><br><span class="line">    <span class="keyword">var</span> term = searchTerm.toLocaleLowerCase();</span><br><span class="line">    <span class="keyword">var</span> result: ISession[] = [];</span><br><span class="line"></span><br><span class="line">    EVENTS.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> matchingSessions = e.sessions.filter(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.name.toLocaleLowerCase().indexOf(term) &gt; <span class="number">-1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//we also want to add event id to all filtered sessions</span></span><br><span class="line">        matchingSessions = matchingSessions.map(<span class="function">(<span class="params">session: any</span>) =&gt;</span> &#123;</span><br><span class="line">            session.eventId = e.id;</span><br><span class="line">            <span class="keyword">return</span> session;</span><br><span class="line">        &#125;);</span><br><span class="line">        result.push(...matchingSessions);</span><br><span class="line">        <span class="comment">// result = result.concat(matchingSessions);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> emitter = <span class="keyword">new</span> EventEmitter(<span class="literal">true</span>); <span class="comment">//async</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        emitter.emit(result);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nav.component.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ISession&#125; <span class="keyword">from</span> <span class="string">'../events/shared/event.model'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'../events/shared/event.service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NavBarComponent</span> </span>&#123;</span><br><span class="line">+    <span class="keyword">constructor</span>(private authService: AuthService, private eventService: EventService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">+    searchTerm: string = <span class="string">""</span>;</span><br><span class="line">+    foundSessions: ISession[];</span><br><span class="line"></span><br><span class="line">+    searchSessions(searchTerm) &#123;</span><br><span class="line">+        <span class="keyword">this</span>.eventService.searchSessions(searchTerm)</span><br><span class="line">+            .subscribe(<span class="function"><span class="params">sessions</span> =&gt;</span> &#123;</span><br><span class="line">+                <span class="keyword">this</span>.foundSessions = sessions;</span><br><span class="line">+                <span class="built_in">console</span>.log(<span class="keyword">this</span>.foundSessions)</span><br><span class="line">+            &#125;);</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now if you search “pipe”, there should be one matching session in your console.</p><h3 id="Adding-jQuery"><a href="#Adding-jQuery" class="headerlink" title="Adding jQuery"></a>Adding jQuery</h3><p>create common/jQuery.service.ts and create common index barrel.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; OpaqueToken &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> JQ_TOKEN = <span class="keyword">new</span> OpaqueToken(<span class="string">'jQuery'</span>);</span><br></pre></td></tr></table></figure><p>register in app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TOASTR_TOKEN, Toastr,</span><br><span class="line">    JQ_TOKEN,</span><br><span class="line">    CollapsibleWellComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./common/index'</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">let</span> toastr: Toastr;</span><br><span class="line">declare <span class="keyword">let</span> jQuery: <span class="built_in">Object</span>;</span><br><span class="line"></span><br><span class="line">providers: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: JQ_TOKEN, <span class="attr">useValue</span>: jQuery &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="Creating-a-Modal-Component"><a href="#Creating-a-Modal-Component" class="headerlink" title="Creating a Modal Component"></a>Creating a Modal Component</h3><p><img src="http://om1o84p1p.bkt.clouddn.com//1493243877.png"></p><p>1) create common/simpleModal.component.ts. Add it to barrel and register in app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Input&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'simple-modal'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div id="simple-modal" class="modal fade" tabindex="-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="modal-dialog"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-header"&gt;</span></span><br><span class="line"><span class="string">                        &lt;button type="button" class="close" data-dismiss="modal"&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;&amp;times;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;h4 class="modal-title"&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-body"&gt;</span></span><br><span class="line"><span class="string">                        &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        .modal-body &#123;height:250px;overflow-y:scroll;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModal</span> </span>&#123;</span><br><span class="line">    @Input() title: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) nav.component.html add below at bottom</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">"searchSessions(searchTerm)"</span> <span class="attr">id</span>=<span class="string">"searchForm"</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"searchTerm"</span> <span class="attr">name</span>=<span class="string">"searchTerm"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search Sessions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">modal-trigger</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- content projection for modal window when clicking search --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">simple-modal</span> <span class="attr">title</span>=<span class="string">"Matching Sessions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> *<span class="attr">ngFor</span>=<span class="string">"let session of foundSessions"</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events', session.eventId]"</span>&gt;</span>&#123;&#123;session.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">simple-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Creating-Directives-The-Trigger-Directive"><a href="#Creating-Directives-The-Trigger-Directive" class="headerlink" title="Creating Directives - The Trigger Directive"></a>Creating Directives - The Trigger Directive</h3><p>I don’t want bind a click event on the search button and write the function with something like $(‘#id’).modal() in nav.component.ts because this will tightly bind modal openup functions with nav.component. Modal feature should be independent on the nav.component. We want to hide the concrete implements, a good way is directive!</p><p>create common/modalTrigger.directive.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, OnInit, Inject, ElementRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;JQ_TOKEN&#125; <span class="keyword">from</span> <span class="string">'./jQuery.service'</span></span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[modal-trigger]'</span>  <span class="comment">//attribute selector</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ModalTriggerDirective</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    private el: HTMLElement;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ref: ElementRef, @Inject(JQ_TOKEN) private $: any) &#123;</span><br><span class="line">        <span class="keyword">this</span>.el = ref.nativeElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.el.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.$(<span class="string">'#simple-modal'</span>).modal(&#123;&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add it to barrel and register Directive in app.module.ts’s declarations</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TOASTR_TOKEN, Toastr,</span><br><span class="line">    JQ_TOKEN,</span><br><span class="line">    CollapsibleWellComponent,</span><br><span class="line">+    SimpleModal, ModalTriggerDirective</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./common/index'</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">let</span> toastr: Toastr;</span><br><span class="line">declare <span class="keyword">let</span> jQuery: <span class="built_in">Object</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">        CollapsibleWellComponent,</span><br><span class="line">+        SimpleModal, ModalTriggerDirective,</span><br><span class="line">        DurationPipe</span><br><span class="line">    ]&#125;)</span><br></pre></td></tr></table></figure><h3 id="Binding-an-ID"><a href="#Binding-an-ID" class="headerlink" title="Binding an ID"></a>Binding an ID</h3><p>issue: we may have many modal windows for different purpose, so we need to pass id dynamically</p><p>current common/modalTrigger.directive.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, OnInit, Inject, ElementRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;JQ_TOKEN&#125; <span class="keyword">from</span> <span class="string">'./jQuery.service'</span></span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[modal-trigger]'</span>  <span class="comment">//attribute selector</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ModalTriggerDirective</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    private el: HTMLElement;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ref: ElementRef, @Inject(JQ_TOKEN) private $: any) &#123;</span><br><span class="line">        <span class="keyword">this</span>.el = ref.nativeElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.el.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.$(<span class="string">'#simple-modal'</span>).modal(&#123;&#125;)  <span class="comment">// bad because we hardcode the id</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we add <code>elementId=&quot;searchResult&quot;</code> in nav.component. Note modal-trigger value and elementId value are same! So I can tell which button triggers which modal.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">modal-trigger</span>=<span class="string">"searchResult"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- content projection for modal window when clicking search --&gt;</span></span><br><span class="line">+ <span class="tag">&lt;<span class="name">simple-modal</span> <span class="attr">title</span>=<span class="string">"Matching Sessions"</span> <span class="attr">elementId</span>=<span class="string">"searchResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> *<span class="attr">ngFor</span>=<span class="string">"let session of foundSessions"</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events', session.eventId]"</span>&gt;</span>&#123;&#123;session.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">simple-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SimpleModal.component.ts, we pass the elementId:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Input&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'simple-modal'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">+        &lt;div id="&#123;&#123;elementId&#125;&#125;" class="modal fade" tabindex="-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="modal-dialog"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-header"&gt;</span></span><br><span class="line"><span class="string">                        &lt;button type="button" class="close" data-dismiss="modal"&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;&amp;times;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;h4 class="modal-title"&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-body"&gt;</span></span><br><span class="line"><span class="string">                        &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        .modal-body &#123;height:250px;overflow-y:scroll;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModal</span> </span>&#123;</span><br><span class="line">    @Input() title: string;</span><br><span class="line">+    @Input() elementId: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ModalTriggerDirective</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, OnInit, Inject, ElementRef, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;JQ_TOKEN&#125; <span class="keyword">from</span> <span class="string">'./jQuery.service'</span></span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[modal-trigger]'</span>  <span class="comment">//attribute selector</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ModalTriggerDirective</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    private el: HTMLElement;</span><br><span class="line">    <span class="comment">// @Input() modal-trigger: string  I want to write like this but typescript cannot compile dash...So use alias</span></span><br><span class="line">+    @Input(<span class="string">'modal-trigger'</span>) modalId: string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ref: ElementRef, @Inject(JQ_TOKEN) private $: any) &#123;</span><br><span class="line">        <span class="keyword">this</span>.el = ref.nativeElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.el.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">            <span class="comment">// issue: we may have many modal windows for different purpose, so need to pass id dynamically</span></span><br><span class="line">            <span class="comment">// this.$('#simple-modal').modal(&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line">+            <span class="keyword">this</span>.$(<span class="string">'#$&#123;this.modalId&#125;'</span>).modal(&#123;&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Routing-to-the-Same-Component"><a href="#Routing-to-the-Same-Component" class="headerlink" title="Routing to the Same Component"></a>Routing to the Same Component</h3><p>Current event-detail page has a bug: when clicking any item in modal window, the url does change, but page doesn’t navigate to the right url…</p><p>event-detail.Component.ts</p><p>snapshot.params is good for the first time to load the page. We need use observable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123;ActivatedRoute, Params&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'/app/events/event-detail/event-detail.component.html'</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .container&#123;padding:0 20px;&#125;</span></span><br><span class="line"><span class="string">        .event-img&#123;height:100px;&#125;</span></span><br><span class="line"><span class="string">        a &#123;cursor:pointer;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDetailComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    event: IEvent</span><br><span class="line">    addMode: boolean = <span class="literal">false</span></span><br><span class="line">    filterBy: string = <span class="string">'all'</span>;</span><br><span class="line">    sortBy: string = <span class="string">'votes'</span>;  <span class="comment">//default sortBy votes</span></span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">-        <span class="comment">// //+ convert string to number</span></span><br><span class="line">-        <span class="comment">// this.event = this.eventService.getEvent(+this.route.snapshot.params['id'])</span></span><br><span class="line"></span><br><span class="line">+        <span class="comment">// whenever route params changes, reset all the states</span></span><br><span class="line">+        <span class="keyword">this</span>.route.params.forEach(<span class="function">(<span class="params">params: Params</span>) =&gt;</span> &#123;</span><br><span class="line">+            <span class="keyword">this</span>.event = <span class="keyword">this</span>.eventService.getEvent(+params[<span class="string">'id'</span>]);</span><br><span class="line">+            <span class="keyword">this</span>.addMode = <span class="literal">false</span>;</span><br><span class="line">+            <span class="keyword">this</span>.filterBy = <span class="string">'all'</span>;</span><br><span class="line">+            <span class="keyword">this</span>.sortBy = <span class="string">'votes'</span>;</span><br><span class="line">+        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-the-ViewChild-Decorator"><a href="#Using-the-ViewChild-Decorator" class="headerlink" title="Using the @ViewChild Decorator"></a>Using the @ViewChild Decorator</h3><p>We want to close the modal when clicking any item</p><p>simpleModal.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123;Component, Input, ViewChild, ElementRef, Inject&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123;JQ_TOKEN&#125; <span class="keyword">from</span> <span class="string">'./jQuery.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'simple-modal'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">+        &lt;div id="&#123;&#123;elementId&#125;&#125;" #modalcontainer class="modal fade" tabindex="-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="modal-dialog"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-header"&gt;</span></span><br><span class="line"><span class="string">                        &lt;button type="button" class="close" data-dismiss="modal"&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;&amp;times;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;h4 class="modal-title"&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-body" (click)="closeModal()"&gt;</span></span><br><span class="line"><span class="string">                        &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        .modal-body &#123;height:250px;overflow-y:scroll;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModal</span> </span>&#123;</span><br><span class="line">    @Input() title: string;</span><br><span class="line">    @Input() elementId: string;</span><br><span class="line">+    @ViewChild(<span class="string">'modalcontainer'</span>) containerEl: ElementRef;</span><br><span class="line"></span><br><span class="line">+    <span class="keyword">constructor</span>( @Inject(JQ_TOKEN) private $: any) &#123; &#125;</span><br><span class="line"></span><br><span class="line">+    closeModal() &#123;</span><br><span class="line">+        <span class="keyword">this</span>.$(<span class="keyword">this</span>.containerEl.nativeElement).modal(<span class="string">'hide'</span>);  <span class="comment">// we can still use previous way like modalTrigger.directive.ts</span></span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Creating-Settings-on-Components"><a href="#Creating-Settings-on-Components" class="headerlink" title="Creating Settings on Components"></a>Creating Settings on Components</h3><p>For some modal windows, we may want to close modal when clicking body while others don’t. So we create settings for this purpose.</p><p>nav.component.html add <code>closeOnBodyClick=&quot;true&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="tag">&lt;<span class="name">simple-modal</span> <span class="attr">closeOnBodyClick</span>=<span class="string">"true"</span> <span class="attr">title</span>=<span class="string">"Matching Sessions"</span> <span class="attr">elementId</span>=<span class="string">"searchResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> *<span class="attr">ngFor</span>=<span class="string">"let session of foundSessions"</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events', session.eventId]"</span>&gt;</span>&#123;&#123;session.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">simple-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SimpleModal.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Input, ViewChild, ElementRef, Inject&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;JQ_TOKEN&#125; <span class="keyword">from</span> <span class="string">'./jQuery.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'simple-modal'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div id="&#123;&#123;elementId&#125;&#125;" #modalcontainer class="modal fade" tabindex="-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="modal-dialog"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-header"&gt;</span></span><br><span class="line"><span class="string">                        &lt;button type="button" class="close" data-dismiss="modal"&gt;</span></span><br><span class="line"><span class="string">                            &lt;span&gt;&amp;times;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;h4 class="modal-title"&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="modal-body" (click)="closeModal()"&gt;</span></span><br><span class="line"><span class="string">                        &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        .modal-body &#123;height:250px;overflow-y:scroll;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModal</span> </span>&#123;</span><br><span class="line">    @Input() title: string;</span><br><span class="line">    @Input() elementId: string;</span><br><span class="line">    @ViewChild(<span class="string">'modalcontainer'</span>) containerEl: ElementRef;</span><br><span class="line">+    @Input() closeOnBodyClick: string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>( @Inject(JQ_TOKEN) private $: any) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    closeModal() &#123;</span><br><span class="line">+        <span class="keyword">if</span> (<span class="keyword">this</span>.closeOnBodyClick.toLocaleLowerCase() === <span class="string">'true'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$(<span class="keyword">this</span>.containerEl.nativeElement).modal(<span class="string">'hide'</span>);  <span class="comment">// we can still use previous way like modalTrigger.directive.ts</span></span><br><span class="line">+        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Create-Directives-and-Advanced-Component&quot;&gt;&lt;a href=&quot;#Create-Directives-and-Advanced-Component&quot; class=&quot;headerlink&quot; title=&quot;Create Direc
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter10 -- DI</title>
    <link href="https://wghglory.github.io/2017/05/05/angular2-chapter10/"/>
    <id>https://wghglory.github.io/2017/05/05/angular2-chapter10/</id>
    <published>2017-05-05T13:39:21.000Z</published>
    <updated>2017-11-22T15:33:20.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-angular-2-do-DI"><a href="#How-angular-2-do-DI" class="headerlink" title="How angular 2 do DI"></a>How angular 2 do DI</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><p>when calling eventService, angular2 uses EventService class as key to do DI, it creates an instance of EventService, and assign it to eventService. (angular1 uses string as key to do DI)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEventComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-Third-Party-Global-Services-The-Problem"><a href="#Using-Third-Party-Global-Services-The-Problem" class="headerlink" title="Using Third Party Global Services - The Problem"></a>Using Third Party Global Services - The Problem</h3><ul><li>Now when we edit profile, change lastname or firstname, save, there is no any user-friendly popup. We want our toastr to do this job.</li><li>Our toastr service uses global variable <code>declare let toastr: any</code>, it comes from the index.html <code>&lt;script src=&quot;node_modules/toastr/build/toastr.min.js&quot;&gt;&lt;/script&gt;</code></li><li>We want a way that avoiding using global variable, and we don’t want to create a toastrService to wrap up all its apis. jQuery has too many apis, we cannot wrap all apis.</li></ul><h3 id="Using-OpaqueToken-for-DI"><a href="#Using-OpaqueToken-for-DI" class="headerlink" title="Using OpaqueToken for DI"></a>Using OpaqueToken for DI</h3><p>1) Update common/toastr.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123; Injectable &#125; from '@angular/core'</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //I guess this local variable was assigned the global toastr variable</span></span><br><span class="line"><span class="comment">// declare let toastr: any</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @Injectable()</span></span><br><span class="line"><span class="comment">// export class ToastrService &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     success(message: string, title?: string) &#123;</span></span><br><span class="line"><span class="comment">//         toastr.success(message, title);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     info(message: string, title?: string) &#123;</span></span><br><span class="line"><span class="comment">//         toastr.info(message, title);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     error(message: string, title?: string) &#123;</span></span><br><span class="line"><span class="comment">//         toastr.error(message, title);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     warning(message: string, title?: string) &#123;</span></span><br><span class="line"><span class="comment">//         toastr.warning(message, title);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; OpaqueToken &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> TOASTR_TOKEN = <span class="keyword">new</span> OpaqueToken(<span class="string">'toastr'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//not necessary if api is large, just for intellisense</span></span><br><span class="line"><span class="keyword">export</span> interface Toastr &#123;</span><br><span class="line">    success(message: string, title?: string): <span class="keyword">void</span>;</span><br><span class="line">    info(message: string, title?: string): <span class="keyword">void</span>;</span><br><span class="line">    error(message: string, title?: string): <span class="keyword">void</span>;</span><br><span class="line">    warning(message: string, title?: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) Register it in app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123; ToastrService &#125; from './common/toastr.service'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; TOASTR_TOKEN, Toastr &#125; <span class="keyword">from</span> <span class="string">'./common/toastr.service'</span></span><br><span class="line">+ declare <span class="keyword">let</span> toastr: Toastr</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [...],</span><br><span class="line">    declarations: [...],</span><br><span class="line">    providers: [</span><br><span class="line">        EventService,</span><br><span class="line">        <span class="comment">// ToastrService,</span></span><br><span class="line">+        &#123; <span class="attr">provide</span>: TOASTR_TOKEN, <span class="attr">useValue</span>: toastr &#125;,</span><br><span class="line">        EventRouteActivator,</span><br><span class="line">        &#123;</span><br><span class="line">            provide: <span class="string">'canDeactivateCreateEvent'</span>,</span><br><span class="line">            useValue: checkDirtyState</span><br><span class="line">        &#125;,</span><br><span class="line">        EventListResolver,</span><br><span class="line">        AuthService</span><br><span class="line">    ],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>3) Remove all old ToastService in events-list component</p><h3 id="Using-the-Inject-Decorator"><a href="#Using-the-Inject-Decorator" class="headerlink" title="Using the @Inject Decorator"></a>Using the @Inject Decorator</h3><p>profile.component.ts:</p><p>1) import Inject, TOASTR_TOKEN, Toastr.<br>2) @Inject(TOASTR_TOKEN) private toastr: Toastr, @Inject is angular DI, Toastr is typescript intellisense (not required)<br>3) use the service: <code>this.toastr.success(&#39;Profile saved successfully!&#39;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; Component, OnInit, Inject &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup, Validators &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">import</span> &#123; TOASTR_TOKEN, Toastr &#125; <span class="keyword">from</span> <span class="string">'../common/toastr.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/profile.component.html'</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input&#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">+    <span class="keyword">constructor</span>(private authService: AuthService, private router: Router, @Inject(TOASTR_TOKEN) private toastr: Toastr) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    profileForm: FormGroup</span><br><span class="line">    private firstName: FormControl</span><br><span class="line">    private lastName: FormControl</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.firstName, [Validators.required, Validators.pattern(<span class="string">'[a-zA-Z].*'</span>)])</span><br><span class="line">        <span class="keyword">this</span>.lastName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.lastName, Validators.required)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.profileForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">            firstName: <span class="keyword">this</span>.firstName,</span><br><span class="line">            lastName: <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveProfile(formValues) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.profileForm.valid) &#123;</span><br><span class="line">            <span class="keyword">this</span>.authService.updateCurrentUser(formValues.firstName, formValues.lastName)</span><br><span class="line">    +        <span class="keyword">this</span>.toastr.success(<span class="string">'Profile saved successfully!'</span>)</span><br><span class="line">    -        <span class="comment">// this.router.navigate(['events'])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    validateFirstName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName.valid || <span class="keyword">this</span>.firstName.untouched</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    validateLastName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lastName.valid || <span class="keyword">this</span>.lastName.untouched</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-useClass-Provider"><a href="#The-useClass-Provider" class="headerlink" title="The useClass Provider"></a>The useClass Provider</h3><p>in app.module.ts:</p><p>Someday we might use <code>{ provide: logger, useClass: fileLogger }</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">    EventService,</span><br><span class="line">    <span class="comment">// ToastrService,</span></span><br><span class="line">    &#123; <span class="attr">provide</span>: TOASTR_TOKEN, <span class="attr">useValue</span>: toastr &#125;,</span><br><span class="line">    EventRouteActivator, <span class="comment">//short hand of &#123; provide: EventRouteActivator, useClass: EventRouteActivator &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">        provide: <span class="string">'canDeactivateCreateEvent'</span>,</span><br><span class="line">        useValue: checkDirtyState</span><br><span class="line">    &#125;,</span><br><span class="line">    EventListResolver,</span><br><span class="line">    AuthService</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="The-useExisting-and-useFactory-Providers-rarely-use"><a href="#The-useExisting-and-useFactory-Providers-rarely-use" class="headerlink" title="The useExisting and useFactory Providers (rarely use)"></a>The useExisting and useFactory Providers (rarely use)</h3><p>You use Logger service. It’s a big api which contains 30 methods, but you are going to use only 5 common methods</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: MinimalLogger, <span class="attr">useExisting</span>: Logger &#125;,</span><br><span class="line">    &#123; <span class="attr">provide</span>: MinimalLogger, <span class="attr">useFactory</span>: Logger &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-angular-2-do-DI&quot;&gt;&lt;a href=&quot;#How-angular-2-do-DI&quot; class=&quot;headerlink&quot; title=&quot;How angular 2 do DI&quot;&gt;&lt;/a&gt;How angular 2 do DI&lt;/h1&gt;&lt;p&gt;Ch
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter09 -- Displaying Data with Pipes</title>
    <link href="https://wghglory.github.io/2017/05/04/angular2-chapter09/"/>
    <id>https://wghglory.github.io/2017/05/04/angular2-chapter09/</id>
    <published>2017-05-04T03:00:29.000Z</published>
    <updated>2017-11-22T15:33:20.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Displaying-Data-with-Pipes"><a href="#Displaying-Data-with-Pipes" class="headerlink" title="Displaying Data with Pipes"></a>Displaying Data with Pipes</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Using-Built-in-Pipes"><a href="#Using-Built-in-Pipes" class="headerlink" title="Using Built-in Pipes"></a>Using Built-in Pipes</h3><p>Now in event list page, you can see event title case is not unique, so we can use pipe to make all titles uppercase.</p><p>Take event-detail.component.html for instance:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;event?.name | uppercase&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Date:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123;event?.date | date:'shortDate'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Price:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123;event?.price | currency:'USD':true&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Creating-a-Custom-Pipe"><a href="#Creating-a-Custom-Pipe" class="headerlink" title="Creating a Custom Pipe"></a>Creating a Custom Pipe</h3><p>Now a problem is duration shows number instead of readable text in event-detail’s session list.</p><p>1) create events/shared/duration.pipe.ts. Register it in barrel, AppModule</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Pipe(&#123; <span class="attr">name</span>: <span class="string">'duration'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">    transform(value: number): string &#123;</span><br><span class="line">        <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">'Half Hour'</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">'One Hour'</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">'Half Day'</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="string">'Full Hour'</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> value.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) session-list add duration pipe:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Duration: &#123;&#123;session.duration | duration&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Sorting-and-Filtering-Overview"><a href="#Sorting-and-Filtering-Overview" class="headerlink" title="Sorting and Filtering Overview"></a>Sorting and Filtering Overview</h3><p>Angular 1 has performance issues. One is using filter, sort by pipe. If a object array have thousands of objects and each object has many properties, it will be very costly to filter or sort. Angular 1 checks if each property of all objects has changed…</p><p>Angular 2 pipe is no longer responsible for sorting or filtering. By default, angular 2 runs the pipe only when the identity of source has changed. Angular 2 also can use “impure pipes”, which is same mechanism as angular 1 with performance issue</p><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><p><img src="http://om1o84p1p.bkt.clouddn.com//1493229011.png"></p><p>In event-detail page, session-list has “level”, and we want to filter session-list by “level”. We put 4 buttons on top.</p><p>event-detail.component.ts add “filterBy” property:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDetailComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    event: IEvent</span><br><span class="line">    addMode: boolean = <span class="literal">false</span></span><br><span class="line">+    filterBy: string = <span class="string">'all'</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>event-detail.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"margin-bottom:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"margin:0"</span>&gt;</span>Sessions<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-7"</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='all'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='all'"</span>&gt;</span>All<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='beginner'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='beginner'"</span>&gt;</span>Beginner<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='intermediate'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='intermediate'"</span>&gt;</span>Intermediate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='advanced'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='advanced'"</span>&gt;</span>Advanced<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"addSession()"</span>&gt;</span>Add Session<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">+ <span class="tag">&lt;<span class="name">session-list</span> [<span class="attr">filterBy</span>]=<span class="string">"filterBy"</span> *<span class="attr">ngIf</span>=<span class="string">"!addMode"</span> [<span class="attr">sessions</span>]=<span class="string">"event?.sessions"</span>&gt;</span><span class="tag">&lt;/<span class="name">session-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>session-list.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; Component, Input, OnChanges &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'session-list'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/events/event-detail/session-list.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListComponent</span> <span class="title">implements</span> <span class="title">OnChanges</span> </span>&#123;</span><br><span class="line">    @Input() sessions: ISession[]</span><br><span class="line">+    @Input() filterBy: string</span><br><span class="line">+    visibleSessions: ISession[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//whenever the input variable changes</span></span><br><span class="line">+    ngOnChanges() &#123;</span><br><span class="line">+        <span class="keyword">if</span> (<span class="keyword">this</span>.sessions) &#123;</span><br><span class="line">+            <span class="keyword">this</span>.filterSessions(<span class="keyword">this</span>.filterBy);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line">+    filterSessions(filter) &#123;</span><br><span class="line">+        <span class="keyword">if</span> (filter === <span class="string">'all'</span>) &#123;</span><br><span class="line">+            <span class="comment">// this.visibleSessions = this.sessions;  //wrong, we want to make a copy</span></span><br><span class="line">+            <span class="keyword">this</span>.visibleSessions = <span class="keyword">this</span>.sessions.slice(<span class="number">0</span>);  <span class="comment">//clone the arr</span></span><br><span class="line">+        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">+            <span class="keyword">this</span>.visibleSessions = <span class="keyword">this</span>.sessions.filter(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">+                <span class="keyword">return</span> s.level.toLocaleLowerCase() == filter;</span><br><span class="line">+            &#125;)</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>session-list.component.html: use visiableSessions instead of sessions</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> *<span class="attr">ngFor</span>=<span class="string">"let session of visibleSessions"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h3><p>sorting by name, voters</p><p>event-detail.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"margin-bottom:10px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"margin:0"</span>&gt;</span>Sessions<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-7"</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-sm"</span> <span class="attr">style</span>=<span class="string">"margin:0 20px;"</span>&gt;</span></span><br><span class="line">+                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"sortBy==='name'"</span> (<span class="attr">click</span>)=<span class="string">"sortBy='name'"</span>&gt;</span>By Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"sortBy==='votes'"</span> (<span class="attr">click</span>)=<span class="string">"sortBy='votes'"</span>&gt;</span>By Votes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-sm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='all'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='all'"</span>&gt;</span>All<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='beginner'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='beginner'"</span>&gt;</span>Beginner<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='intermediate'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='intermediate'"</span>&gt;</span>Intermediate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> [<span class="attr">class.active</span>]=<span class="string">"filterBy==='advanced'"</span> (<span class="attr">click</span>)=<span class="string">"filterBy='advanced'"</span>&gt;</span>Advanced<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"addSession()"</span>&gt;</span>Add Session<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">+    <span class="tag">&lt;<span class="name">session-list</span> [<span class="attr">sortBy</span>]=<span class="string">"sortBy"</span> [<span class="attr">filterBy</span>]=<span class="string">"filterBy"</span> *<span class="attr">ngIf</span>=<span class="string">"!addMode"</span> [<span class="attr">sessions</span>]=<span class="string">"event?.sessions"</span>&gt;</span><span class="tag">&lt;/<span class="name">session-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">create-session</span> *<span class="attr">ngIf</span>=<span class="string">"addMode"</span> (<span class="attr">saveNewSession</span>)=<span class="string">"saveNewSession($event)"</span> (<span class="attr">cancelAddSession</span>)=<span class="string">"cancelAddSession()"</span>&gt;</span><span class="tag">&lt;/<span class="name">create-session</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>event-detail.component.ts add sortBy property:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sortBy: string = <span class="string">'votes'</span>;  <span class="comment">//default votes</span></span><br></pre></td></tr></table></figure><p>session-list.component.ts</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Input, OnChanges &#125; from '@angular/core'</span><br><span class="line">import &#123; ISession &#125; from '../shared/index'</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: 'session-list',</span><br><span class="line">    templateUrl: 'app/events/event-detail/session-list.component.html'</span><br><span class="line">&#125;)</span><br><span class="line">export class SessionListComponent implements OnChanges &#123;</span><br><span class="line">    @Input() sessions: ISession[]</span><br><span class="line">    @Input() filterBy: string</span><br><span class="line">    visibleSessions: ISession[] = [];</span><br><span class="line"><span class="addition">+    @Input() sortBy: string</span></span><br><span class="line"></span><br><span class="line">    //whenever the input variable changes</span><br><span class="line">    ngOnChanges() &#123;</span><br><span class="line">        if (this.sessions) &#123;</span><br><span class="line">            this.filterSessions(this.filterBy);</span><br><span class="line"><span class="addition">+           this.sortBy === 'name' ? this.visibleSessions.sort(sortByNameAsc) : this.visibleSessions.sort(sortByVotesDesc)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterSessions(filter) &#123;</span><br><span class="line">        if (filter <span class="comment">=== 'all') &#123;</span></span><br><span class="line">            // this.visibleSessions = this.sessions;  //wrong, we want to make a copy</span><br><span class="line">            this.visibleSessions = this.sessions.slice(0);  //clone the arr</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.visibleSessions = this.sessions.filter(s =&gt; &#123;</span><br><span class="line">                return s.level.toLocaleLowerCase() == filter;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ function sortByNameAsc(s1: ISession, s2: ISession) &#123;</span></span><br><span class="line"><span class="addition">+    if (s1.name &gt; s2.name) return 1;</span></span><br><span class="line"><span class="addition">+    else if (s1.name === s2.name) return 0;</span></span><br><span class="line"><span class="addition">+    else return -1;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ function sortByVotesDesc(s1: ISession, s2: ISession) &#123;</span></span><br><span class="line"><span class="addition">+    return (s2.voters.length - s1.voters.length);</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Displaying-Data-with-Pipes&quot;&gt;&lt;a href=&quot;#Displaying-Data-with-Pipes&quot; class=&quot;headerlink&quot; title=&quot;Displaying Data with Pipes&quot;&gt;&lt;/a&gt;Displayi
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter08 -- Reusing Components with Content Projection</title>
    <link href="https://wghglory.github.io/2017/05/02/angular2-chapter08/"/>
    <id>https://wghglory.github.io/2017/05/02/angular2-chapter08/</id>
    <published>2017-05-02T02:16:37.000Z</published>
    <updated>2017-11-22T15:33:20.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reusing-Components-with-Content-Projection"><a href="#Reusing-Components-with-Content-Projection" class="headerlink" title="Reusing Components with Content Projection"></a>Reusing Components with Content Projection</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Content-Projection"><a href="#Content-Projection" class="headerlink" title="Content Projection"></a>Content Projection</h3><p>Now in event-detail page, there’s a list of sessions for that event. We want to <strong>collapse and expand every session when clicking the session div</strong>. Since this feature is quite common, and probably get reused somewhere else, we need to put this function into common folder.</p><p>1) In session-list.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> *<span class="attr">ngFor</span>=<span class="string">"let session of sessions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- content projection --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collapsible-well</span> [<span class="attr">title</span>]=<span class="string">"session.name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span>&gt;</span>&#123;&#123;session.presenter&#125;&#125;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Duration: &#123;&#123;session.duration&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Level: &#123;&#123;session.level&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;session.abstract&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collapsible-well</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class="well"&gt;</span></span><br><span class="line"><span class="comment">            &lt;h4&gt;&#123;&#123;session.name&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="comment">            &lt;h6&gt;&#123;&#123;session.presenter&#125;&#125;&lt;/h6&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;Duration: &#123;&#123;session.duration&#125;&#125;&lt;/span&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;Level: &#123;&#123;session.level&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">            &lt;p&gt;&#123;&#123;session.abstract&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) create common/collapsible-well.component, and register it in module</p><blockquote><p>Note: <ng-content> is responsible to show html inside its selector “collapsible-well”: h6+span+span+p in this case</ng-content></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'collapsible-well'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div (click)="toggleContent()" class="well pointable"&gt;</span></span><br><span class="line"><span class="string">            &lt;h4 class="well-title"&gt;&#123;&#123;title&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">            &lt;ng-content *ngIf="visible"&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CollapsibleWellComponent</span> </span>&#123;</span><br><span class="line">    @Input() title: string;</span><br><span class="line">    visible: boolean = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    toggleContent() &#123;</span><br><span class="line">        <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multiple-Slot-Content-Projection"><a href="#Multiple-Slot-Content-Projection" class="headerlink" title="Multiple Slot Content Projection"></a>Multiple Slot Content Projection</h3><p>We also want to add a flame icon next to the session title if any session is hot. If we add this feature into collapsible-well template after <code>&lt;h4 class=&quot;well-title&quot;&gt;angular2-chapter08 -- Reusing Components with Content Projection&lt;/h4&gt;</code>, this component is not generic.</p><p>session-list.component.html:</p><p>well-title and well-body attributes can be used as selectors in collapsible-well.component template. Attribute is better than class since it won’t give us any conflict for a css class.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> *<span class="attr">ngFor</span>=<span class="string">"let session of sessions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- multi slot content projection --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collapsible-well</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">well-title</span>&gt;</span></span><br><span class="line">                &#123;&#123;session.name&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> *<span class="attr">ngIf</span>=<span class="string">"session.voters.length&gt;3"</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-fire"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">well-body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h6</span>&gt;</span>&#123;&#123;session.presenter&#125;&#125;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Duration: &#123;&#123;session.duration&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Level: &#123;&#123;session.level&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;session.abstract&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collapsible-well</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- content projection --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;collapsible-well [title]="session.name"&gt;</span></span><br><span class="line"><span class="comment">            &lt;h6&gt;&#123;&#123;session.presenter&#125;&#125;&lt;/h6&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;Duration: &#123;&#123;session.duration&#125;&#125;&lt;/span&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;Level: &#123;&#123;session.level&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">            &lt;p&gt;&#123;&#123;session.abstract&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;/collapsible-well&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class="well"&gt;</span></span><br><span class="line"><span class="comment">            &lt;h4&gt;&#123;&#123;session.name&#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="comment">            &lt;h6&gt;&#123;&#123;session.presenter&#125;&#125;&lt;/h6&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;Duration: &#123;&#123;session.duration&#125;&#125;&lt;/span&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;Level: &#123;&#123;session.level&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">            &lt;p&gt;&#123;&#123;session.abstract&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>collapsible-well.component.ts updates template:</p><blockquote><p>Note: ng-content with select is used to display the html. “select” can have id selector, class selector, etc. Attribute selector is best for multiple slot content projection</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'collapsible-well'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div (click)="toggleContent()" class="well pointable"&gt;</span></span><br><span class="line"><span class="string">            &lt;h4&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-content select="[well-title]"&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">            &lt;/h4&gt;</span></span><br><span class="line"><span class="string">            &lt;ng-content *ngIf="visible" select="[well-body]"&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CollapsibleWellComponent</span> </span>&#123;</span><br><span class="line">    @Input() title: string;</span><br><span class="line">    visible: boolean = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    toggleContent() &#123;</span><br><span class="line">        <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reusing-Components-with-Content-Projection&quot;&gt;&lt;a href=&quot;#Reusing-Components-with-Content-Projection&quot; class=&quot;headerlink&quot; title=&quot;Reusing 
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter07 -- Components Communicating</title>
    <link href="https://wghglory.github.io/2017/04/29/angular2-chapter07/"/>
    <id>https://wghglory.github.io/2017/04/29/angular2-chapter07/</id>
    <published>2017-04-29T05:21:36.000Z</published>
    <updated>2017-11-22T15:33:20.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Components-Communicating-Parent-and-Child-Same-as-chapter02"><a href="#Components-Communicating-Parent-and-Child-Same-as-chapter02" class="headerlink" title="Components Communicating (Parent and Child, Same as chapter02)"></a>Components Communicating (Parent and Child, Same as chapter02)</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Pass-parent-component-to-child-component-Input"><a href="#Pass-parent-component-to-child-component-Input" class="headerlink" title="Pass parent component to child component (@Input())"></a>Pass parent component to child component (@Input())</h3><p>Now in event-detail page, we don’t show the session information. We want to show session-list for a specific event-detail. Let’s create session-list at bottom of event-details.component page</p><p>Add below html into event-detail.component.html (parent component template):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-list</span> [<span class="attr">sessions</span>]=<span class="string">"event?.sessions"</span>&gt;</span><span class="tag">&lt;/<span class="name">session-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Create events/event-detail/session-list.component.ts and its template html page. Don’t forget to register component. Child component imports <code>Input</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'session-list'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/events/events-detail/session-list.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListComponent</span> </span>&#123;</span><br><span class="line">    @Input() sessions: ISession[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pass-child-component-to-parent-Output-EventEmitter"><a href="#Pass-child-component-to-parent-Output-EventEmitter" class="headerlink" title="Pass child component to parent (@Output(), EventEmitter)"></a>Pass child component to parent (@Output(), EventEmitter)</h3><p>We want to add session or cancel addNewSession for a detail event, so still in event-detail template (Parent component), add this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"margin:0"</span>&gt;</span>Sessions<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"addSession()"</span>&gt;</span>Add Session<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">session-list</span> *<span class="attr">ngIf</span>=<span class="string">"!addMode"</span> [<span class="attr">sessions</span>]=<span class="string">"event?.sessions"</span>&gt;</span><span class="tag">&lt;/<span class="name">session-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">create-session</span> *<span class="attr">ngIf</span>=<span class="string">"addMode"</span> (<span class="attr">saveNewSession</span>)=<span class="string">"saveNewSession($event)"</span> (<span class="attr">cancelAddSession</span>)=<span class="string">"cancelAddSession()"</span>&gt;</span><span class="tag">&lt;/<span class="name">create-session</span>&gt;</span></span><br></pre></td></tr></table></figure><p>event-detail.component.ts (Parent component)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://localhost:8808/events/3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'../shared/event.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ActivatedRoute&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">import</span> &#123;IEvent, ISession&#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'/app/events/event-detail/event-detail.component.html'</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .container&#123;padding:0 20px;&#125;</span></span><br><span class="line"><span class="string">        .event-img&#123;height:100px;&#125;</span></span><br><span class="line"><span class="string">+        a &#123;cursor:pointer;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDetailComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    event: IEvent</span><br><span class="line">+    addMode: boolean = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="comment">//+ convert string to number</span></span><br><span class="line">        <span class="keyword">this</span>.event = <span class="keyword">this</span>.eventService.getEvent(+<span class="keyword">this</span>.route.snapshot.params[<span class="string">'id'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    addSession() &#123;</span><br><span class="line">+        <span class="keyword">this</span>.addMode = <span class="literal">true</span>;</span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line">+    saveNewSession(session: ISession) &#123;</span><br><span class="line">+        <span class="comment">//find max id, and newSession id should = id + 1</span></span><br><span class="line">+        <span class="comment">// const maxId = Math.max.apply(null, this.event.sessions.map(s =&gt; s.id))</span></span><br><span class="line">+        <span class="keyword">const</span> maxId = <span class="built_in">Math</span>.max(...this.event.sessions.map(<span class="function"><span class="params">s</span> =&gt;</span> s.id))</span><br><span class="line"></span><br><span class="line">+        session.id = maxId + <span class="number">1</span>;</span><br><span class="line">+        <span class="keyword">this</span>.event.sessions.push(session)</span><br><span class="line">+        <span class="keyword">this</span>.eventService.updateEvent(<span class="keyword">this</span>.event)</span><br><span class="line">+        <span class="keyword">this</span>.addMode = <span class="literal">false</span></span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line">+    cancelAddSession() &#123;</span><br><span class="line">+        <span class="keyword">this</span>.addMode = <span class="literal">false</span></span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shared/event.service.ts add updateEvent method:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updateEvent(event) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = EVENTS.findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x.id == event.id)</span><br><span class="line">    EVENTS[index] = event</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we creates a new session, save or cancel it in create-session.component, the data will be passed to its parent, event-detail.component.</p><p>create-session.component.ts (Child component):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; Component, OnInit, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup, Validators &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession, restrictedWords &#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">+    selector: <span class="string">'create-session'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/events/event-detail/create-session.component.html'</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input, .error select, .error textarea &#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSessionComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">+    @Output() saveNewSession = <span class="keyword">new</span> EventEmitter()</span><br><span class="line">+    @Output() cancelAddSession = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"></span><br><span class="line">    newSessionForm: FormGroup</span><br><span class="line">    name: FormControl</span><br><span class="line">    presenter: FormControl</span><br><span class="line">    duration: FormControl</span><br><span class="line">    level: FormControl</span><br><span class="line">    abstract: FormControl</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.presenter = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.duration = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.abstract = <span class="keyword">new</span> FormControl(<span class="string">''</span>, [Validators.required, Validators.maxLength(<span class="number">400</span>), restrictedWords([<span class="string">'foo'</span>, <span class="string">'bar'</span>])])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.newSessionForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">            name: <span class="keyword">this</span>.name,</span><br><span class="line">            presenter: <span class="keyword">this</span>.presenter,</span><br><span class="line">            duration: <span class="keyword">this</span>.duration,</span><br><span class="line">            level: <span class="keyword">this</span>.level,</span><br><span class="line">            abstract: <span class="keyword">this</span>.abstract</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    saveSession(formValues) &#123;</span><br><span class="line">        <span class="keyword">let</span> session: ISession = &#123;</span><br><span class="line">            id: <span class="literal">undefined</span>,</span><br><span class="line">            name: formValues.name,</span><br><span class="line">            duration: +formValues.duration,  <span class="comment">//convert</span></span><br><span class="line">            presenter: formValues.presenter,</span><br><span class="line">            level: formValues.level,</span><br><span class="line">            abstract: formValues.abstract,</span><br><span class="line">            voters: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">+        <span class="keyword">this</span>.saveNewSession.emit(session)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    cancel()&#123;</span><br><span class="line">+        <span class="keyword">this</span>.cancelAddSession.emit()</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wire up cancel button in create-session.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Create Session<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"newSessionForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"saveSession(newSessionForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': name.invalid &amp;&amp; name.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sessionName"</span>&gt;</span>Session Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"name.invalid &amp;&amp; name.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"sessionName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"session name..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': presenter.invalid &amp;&amp; presenter.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"presenter"</span>&gt;</span>Presenter:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"presenter.invalid &amp;&amp; presenter.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"presenter"</span> <span class="attr">id</span>=<span class="string">"presenter"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"presenter..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': duration.invalid &amp;&amp; duration.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"duration"</span>&gt;</span>Duration:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"duration.invalid &amp;&amp; duration.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">formControlName</span>=<span class="string">"duration"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>select duration...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>Half Hour<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>1 Hour<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>Half Day<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>Full Day<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': level.invalid &amp;&amp; level.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"level"</span>&gt;</span>Level:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"level.invalid &amp;&amp; level.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">formControlName</span>=<span class="string">"level"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>select level...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Beginner"</span>&gt;</span>Beginner<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Intermediate"</span>&gt;</span>Intermediate<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Advanced"</span>&gt;</span>Advanced<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': abstract.invalid &amp;&amp; abstract.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"abstract"</span>&gt;</span>Abstract:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"abstract.invalid &amp;&amp; abstract.dirty &amp;&amp; abstract?.errors.required"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"abstract.invalid &amp;&amp; abstract.dirty &amp;&amp; abstract?.errors.maxlength"</span>&gt;</span>Cannot exceed 400 characters<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"abstract.invalid &amp;&amp; abstract.dirty &amp;&amp; abstract?.errors.restrictedWords"</span>&gt;</span>Restricted Words found: &#123;&#123;abstract.errors.restrictedWords&#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">formControlName</span>=<span class="string">"abstract"</span> <span class="attr">id</span>=<span class="string">"abstract"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"abstract..."</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> [<span class="attr">disabled</span>]=<span class="string">"newSessionForm.invalid"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"cancel()"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Components-Communicating-Parent-and-Child-Same-as-chapter02&quot;&gt;&lt;a href=&quot;#Components-Communicating-Parent-and-Child-Same-as-chapter02&quot; 
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter06 -- Collecting Data with Forms and Validation</title>
    <link href="https://wghglory.github.io/2017/04/24/angular2-chapter06/"/>
    <id>https://wghglory.github.io/2017/04/24/angular2-chapter06/</id>
    <published>2017-04-24T10:21:15.000Z</published>
    <updated>2017-11-22T15:33:20.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collecting-Data-with-Forms-and-Validation"><a href="#Collecting-Data-with-Forms-and-Validation" class="headerlink" title="Collecting Data with Forms and Validation"></a>Collecting Data with Forms and Validation</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Using-Models-for-Type-Safety"><a href="#Using-Models-for-Type-Safety" class="headerlink" title="Using Models for Type Safety"></a>Using Models for Type Safety</h3><p>1) create events/shared/event.model.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface IEvent &#123;</span><br><span class="line">    id: number</span><br><span class="line">    name: string</span><br><span class="line">    date: <span class="built_in">Date</span></span><br><span class="line">    time: string</span><br><span class="line">    price: number</span><br><span class="line">    imageUrl: string</span><br><span class="line">    location?: &#123;</span><br><span class="line">        address: string</span><br><span class="line">        city: string</span><br><span class="line">        country: string</span><br><span class="line">    &#125;,</span><br><span class="line">    onlineUrl?: string</span><br><span class="line">    sessions: ISession[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface ISession &#123;</span><br><span class="line">    id: number</span><br><span class="line">    name: string</span><br><span class="line">    presenter: string</span><br><span class="line">    duration: number</span><br><span class="line">    level: string</span><br><span class="line">    abstract: string</span><br><span class="line">    voters: string[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) export in shared index.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event.service'</span></span><br><span class="line">+ <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event.model'</span></span><br></pre></td></tr></table></figure><p>3) event.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; Subject, Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/RX'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; IEvent &#125; <span class="keyword">from</span> <span class="string">'./event.model'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">+    getEvents(): Observable&lt;IEvent[]&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//simulate async loading data operation, return subject. Need to change events-list.component.ts</span></span><br><span class="line">+        <span class="keyword">let</span> subject = <span class="keyword">new</span> Subject&lt;IEvent[]&gt;()</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            subject.next(EVENTS);</span><br><span class="line">            subject.complete();</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    getEvent(id: number): IEvent &#123;</span><br><span class="line">        <span class="keyword">return</span> EVENTS.find(<span class="function"><span class="params">e</span> =&gt;</span> e.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">const</span> EVENTS: IEvent[] = ...</span><br></pre></td></tr></table></figure><p>4) update <code>event:any</code> to <code>event:IEvent</code> in event-detail.component, event-list.component, event-thumbnail.component</p><h3 id="Creating-Your-First-Template-based-Form"><a href="#Creating-Your-First-Template-based-Form" class="headerlink" title="Creating Your First Template-based Form"></a>Creating Your First Template-based Form</h3><p>1) user/login.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/login.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private authService: AuthService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    login(formValues) &#123;  <span class="comment">////will be object of userName and password</span></span><br><span class="line">        <span class="keyword">this</span>.authService.loginUser(formValues.userName, formValues.password)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) login.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> #<span class="attr">loginForm</span>=<span class="string">"ngForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"login(loginForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>User Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> (<span class="attr">ngModel</span>)=<span class="string">"userName"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"User Name..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> (<span class="attr">ngModel</span>)=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3) Register component in UserModule</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span></span><br><span class="line"><span class="keyword">import</span> &#123;userRoutes&#125; <span class="keyword">from</span> <span class="string">'./user.routes'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ProfileComponent&#125; <span class="keyword">from</span> <span class="string">'./profile.component'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123;LoginComponent&#125; <span class="keyword">from</span> <span class="string">'./login.component'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123;FormsModule&#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [</span><br><span class="line">        CommonModule,</span><br><span class="line">+        FormsModule,</span><br><span class="line">        RouterModule.forChild(userRoutes)</span><br><span class="line">    ],</span><br><span class="line">    declarations: [</span><br><span class="line">        ProfileComponent,</span><br><span class="line">+        LoginComponent</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>4) Add user.routes.ts path</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ProfileComponent&#125; <span class="keyword">from</span> <span class="string">'./profile.component'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123;LoginComponent&#125; <span class="keyword">from</span> <span class="string">'./login.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userRoutes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'profile'</span>, <span class="attr">component</span>: ProfileComponent &#125;,</span><br><span class="line">+    &#123; <span class="attr">path</span>: <span class="string">'login'</span>, <span class="attr">component</span>: LoginComponent &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>5) create user/user.model.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface IUser &#123;</span><br><span class="line">    id: number</span><br><span class="line">    firstName: string</span><br><span class="line">    lastName: string</span><br><span class="line">    userName: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6) create user/auth.service.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;IUser&#125; <span class="keyword">from</span> <span class="string">'./user.model'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line">    currentUser: IUser</span><br><span class="line"></span><br><span class="line">    loginUser(userName: string, <span class="attr">password</span>: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentUser = &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            userName: userName,</span><br><span class="line">            firstName: <span class="string">'guanghui'</span>,</span><br><span class="line">            lastName: <span class="string">'wang'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isAuthenticated() &#123;</span><br><span class="line">        <span class="keyword">return</span> !!<span class="keyword">this</span>.currentUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7) register service in app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">+ <span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">'./user/auth.service'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    ...</span><br><span class="line">    providers: [</span><br><span class="line">        ...</span><br><span class="line">+        AuthService</span><br><span class="line">    ],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>8) inject AuthService in nav.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">'../user/auth.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'nav-bar'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/nav/nav.component.html'</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .nav.navbar-nav &#123;font-size:15px;&#125;</span></span><br><span class="line"><span class="string">        #searchForm &#123;margin-right:100px;&#125;</span></span><br><span class="line"><span class="string">        @media(max-width:1200px) &#123;#searchForm &#123;display:none;&#125;&#125;</span></span><br><span class="line"><span class="string">        li&gt;a.active&#123;color:#f97924;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NavBarComponent</span> </span>&#123;</span><br><span class="line">+    <span class="keyword">constructor</span>(private authService: AuthService) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9) modify nav.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> *<span class="attr">ngIf</span>=<span class="string">"!authService.isAuthenticated()"</span> [<span class="attr">routerLink</span>]=<span class="string">"['user/login']"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> *<span class="attr">ngIf</span>=<span class="string">"authService.isAuthenticated()"</span> [<span class="attr">routerLink</span>]=<span class="string">"['user/profile']"</span>&gt;</span>Welcome &#123;&#123;authService.currentUser.userName&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now when you type username, password and then click login, the rightmost area in navbar’s “login” will become the userName.</p><p>We will finish up the other features below, like when we click login, or cancel, navigate to all events page</p><p>So login.component.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;AuthService&#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">import</span> &#123;Router&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/login.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">+    <span class="keyword">constructor</span>(private authService: AuthService, private router:Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    login(formValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.authService.loginUser(formValues.userName, formValues.password)</span><br><span class="line"></span><br><span class="line">+        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    cancel()&#123;</span><br><span class="line">+        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add cancel click in login.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"cancel()"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Validating-Template-based-Forms-LoginForm"><a href="#Validating-Template-based-Forms-LoginForm" class="headerlink" title="Validating Template-based Forms (LoginForm)"></a>Validating Template-based Forms (LoginForm)</h3><p>login.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">form</span> #<span class="attr">loginForm</span>=<span class="string">"ngForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"login(loginForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>User Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"loginForm.controls.userName?.invalid &amp;&amp; (loginForm.controls.userName?.touched || mouseoverLogin)"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> (<span class="attr">ngModel</span>)=<span class="string">"userName"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"User Name..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"loginForm.controls.password?.invalid &amp;&amp; (loginForm.controls.password?.touched || mouseoverLogin)"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> (<span class="attr">ngModel</span>)=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;<span class="name">span</span> (<span class="attr">mouseenter</span>)=<span class="string">"mouseoverLogin=true"</span> (<span class="attr">mouseleave</span>)=<span class="string">"mouseoverLogin=false"</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">button</span> [<span class="attr">disabled</span>]=<span class="string">"loginForm.invalid"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"cancel()"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hover on the login button, display the reason if user is not allowed login --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- disabled button cannot fire event! So have to wrap span around button --&gt;</span></span><br></pre></td></tr></table></figure><p>login.component.ts add styles:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/login.component.html'</span>,</span><br><span class="line">    styles:[</span><br><span class="line">        <span class="string">`em &#123;float:right;color:#e05c65;padding-left:10px;&#125;`</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Creating-Your-First-Reactive-Form-Profile-Form"><a href="#Creating-Your-First-Reactive-Form-Profile-Form" class="headerlink" title="Creating Your First Reactive Form (Profile Form)"></a>Creating Your First Reactive Form (Profile Form)</h3><p>1) create profile.component.html and update profile.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/profile.component.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private authService: AuthService, private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    profileForm: FormGroup</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">let</span> firstName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.firstName)</span><br><span class="line">        <span class="keyword">let</span> lastName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.lastName)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.profileForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">            firstName: firstName,</span><br><span class="line">            lastName: lastName</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveProfile(formValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.authService.updateCurrentUser(formValues.firstName, formValues.lastName)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Edit Your Profile <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"profileForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"saveProfile(profileForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"firstName"</span>&gt;</span>First Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"firstName"</span> <span class="attr">id</span>=<span class="string">"firstName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"First Name..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lastName"</span>&gt;</span>Last Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"lastName"</span> <span class="attr">id</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Last Name..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"cancel()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) import ReactiveFormsModule into user.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">+ <span class="keyword">import</span> &#123;FormsModule,ReactiveFormsModule&#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [</span><br><span class="line">        CommonModule,</span><br><span class="line">        FormsModule,</span><br><span class="line">+        ReactiveFormsModule,</span><br><span class="line">        RouterModule.forChild(userRoutes)</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>3) add updateCurrentUser method in authService</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    updateCurrentUser(firstName: string, <span class="attr">lastName</span>: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentUser.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.currentUser.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Validating-Reactive-Forms"><a href="#Validating-Reactive-Forms" class="headerlink" title="Validating Reactive Forms"></a>Validating Reactive Forms</h3><p>1) add required Validators, error style, validateFirstName, validateLastName functions in profile.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; FormControl, FormGroup, Validators &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/profile.component.html'</span>,</span><br><span class="line">+    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input&#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private authService: AuthService, private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    profileForm: FormGroup</span><br><span class="line">+   private firstName: FormControl</span><br><span class="line">+   private lastName: FormControl</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">+        <span class="keyword">this</span>.firstName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.firstName, Validators.required)</span><br><span class="line">+        <span class="keyword">this</span>.lastName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.lastName, Validators.required)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.profileForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">+            firstName: <span class="keyword">this</span>.firstName,</span><br><span class="line">+            lastName: <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveProfile(formValues) &#123;</span><br><span class="line">+        <span class="keyword">if</span> (<span class="keyword">this</span>.profileForm.valid) &#123;</span><br><span class="line">            <span class="keyword">this</span>.authService.updateCurrentUser(formValues.firstName, formValues.lastName)</span><br><span class="line">            <span class="keyword">this</span>.router.navigate([<span class="string">'events'</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+    validateFirstName() &#123;</span><br><span class="line">+        <span class="keyword">return</span> <span class="keyword">this</span>.firstName.valid || <span class="keyword">this</span>.firstName.untouched</span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line">+    validateLastName() &#123;</span><br><span class="line">+        <span class="keyword">return</span> <span class="keyword">this</span>.lastName.valid || <span class="keyword">this</span>.lastName.untouched</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) update profile template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Edit Your Profile <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"profileForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"saveProfile(profileForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': !validateFirstName()&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"firstName"</span>&gt;</span>First Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+                <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"!validateFirstName()"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"firstName"</span> <span class="attr">id</span>=<span class="string">"firstName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"First Name..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">+            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': !validateLastName()&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lastName"</span>&gt;</span>Last Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+                <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"!validateLastName()"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"lastName"</span> <span class="attr">id</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Last Name..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"cancel()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Using-Multiple-Validators-in-Reactive-Forms"><a href="#Using-Multiple-Validators-in-Reactive-Forms" class="headerlink" title="Using Multiple Validators in Reactive Forms"></a>Using Multiple Validators in Reactive Forms</h3><p>Let’s say we want firstName starts with a letter, so we add Validators.pattern</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup, Validators &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/user/profile.component.html'</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input&#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private authService: AuthService, private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    profileForm: FormGroup</span><br><span class="line">    firstName: FormControl</span><br><span class="line">    lastName: FormControl</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">+        <span class="keyword">this</span>.firstName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.firstName, [Validators.required, Validators.pattern(<span class="string">'[a-zA-Z].*'</span>)])</span><br><span class="line">        <span class="keyword">this</span>.lastName = <span class="keyword">new</span> FormControl(<span class="keyword">this</span>.authService.currentUser.lastName, Validators.required)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.profileForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">            firstName: <span class="keyword">this</span>.firstName,</span><br><span class="line">            lastName: <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>profile template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Edit Your Profile <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"profileForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"saveProfile(profileForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': !validateFirstName()&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"firstName"</span>&gt;</span>First Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">+                <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"!validateFirstName() &amp;&amp; profileForm.controls.firstName.errors.required"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">+                <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"!validateFirstName() &amp;&amp; profileForm.controls.firstName.errors.pattern"</span>&gt;</span>firstName starts with a letter<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"firstName"</span> <span class="attr">id</span>=<span class="string">"firstName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"First Name..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Diving-Deeper-into-Template-based-Forms-Create-New-Event"><a href="#Diving-Deeper-into-Template-based-Forms-Create-New-Event" class="headerlink" title="Diving Deeper into Template-based Forms (Create New Event)"></a>Diving Deeper into Template-based Forms (Create New Event)</h3><p>1) add create-event.component.html</p><p>2) create-event.component.ts: Add styles, saveEvent</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//click cancel will use router to navigate to /events (load all events)</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Router&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'./shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/events/create-event.component.html'</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input&#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEventComponent</span> </span>&#123;</span><br><span class="line">    isDirty: boolean = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private router: Router, private eventService: EventService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'/events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveEvent(formValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.eventService.saveEvent(formValues)</span><br><span class="line">        <span class="keyword">this</span>.isDirty = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'/events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we can now add a temporary method in event.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">saveEvent(event)&#123;</span><br><span class="line">    event.id = <span class="number">999</span>;</span><br><span class="line">    event.sessions = [];</span><br><span class="line">    EVENTS.push(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) import FormsModule, ReactiveFormsModule in app.module.ts</p><p>4) now when we submit the form, formValues is a object that has city, address, country, name, etc. They are at same level. Our model structure actually has location property which includes address, city, country. So we can use ngModelGroup to wrap up these 3 fields.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="tag">&lt;<span class="name">div</span> <span class="attr">ngModelGroup</span>=<span class="string">"location"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"address"</span>&gt;</span>Event Location:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> (<span class="attr">ngModel</span>)=<span class="string">"address"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Address of event..."</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> (<span class="attr">ngModel</span>)=<span class="string">"city"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"City..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> (<span class="attr">ngModel</span>)=<span class="string">"country"</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">id</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Country..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">+ <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>data is like  <code>{name: &quot;fdsa&quot;, date: &quot;1010/2/2&quot;, time: &quot;8:00&quot;, price: 34432, location: {address: &quot;fds&quot;, city: &quot;fdasfdas&quot;, country: &quot;fdsa&quot;}, …}</code></p><h3 id="Diving-Deeper-into-Reactive-Forms-Event-detail-shows-session"><a href="#Diving-Deeper-into-Reactive-Forms-Event-detail-shows-session" class="headerlink" title="Diving Deeper into Reactive Forms (Event-detail shows session)"></a>Diving Deeper into Reactive Forms (Event-detail shows session)</h3><p>1) create /events/event-detail/create-session.component.ts, its template. Don’t forget to export in index.ts and register in app.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup, Validators &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession &#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/events/event-detail/create-session.component.html'</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input, .error select, .error textarea &#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSessionComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    newSessionForm: FormGroup</span><br><span class="line">    name: FormControl</span><br><span class="line">    presenter: FormControl</span><br><span class="line">    duration: FormControl</span><br><span class="line">    level: FormControl</span><br><span class="line">    abstract: FormControl</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.presenter = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.duration = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.abstract = <span class="keyword">new</span> FormControl(<span class="string">''</span>, [Validators.required, Validators.maxLength(<span class="number">400</span>)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.newSessionForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">            name: <span class="keyword">this</span>.name,</span><br><span class="line">            presenter: <span class="keyword">this</span>.presenter,</span><br><span class="line">            duration: <span class="keyword">this</span>.duration,</span><br><span class="line">            level: <span class="keyword">this</span>.level,</span><br><span class="line">            abstract: <span class="keyword">this</span>.abstract</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveSession(formValues) &#123;</span><br><span class="line">        <span class="comment">// console.log(formValues);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> session: ISession = &#123;</span><br><span class="line">            id: <span class="literal">undefined</span>,</span><br><span class="line">            name: formValues.name,</span><br><span class="line">            duration: +formValues.duration,  <span class="comment">//convert</span></span><br><span class="line">            presenter: formValues.presenter,</span><br><span class="line">            level: formValues.level,</span><br><span class="line">            abstract: formValues.abstract,</span><br><span class="line">            voters: []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(session)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Create Session<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"newSessionForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"saveSession(newSessionForm.value)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': name.invalid &amp;&amp; name.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sessionName"</span>&gt;</span>Session Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"name.invalid &amp;&amp; name.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"sessionName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"session name..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': presenter.invalid &amp;&amp; presenter.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"presenter"</span>&gt;</span>Presenter:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"presenter.invalid &amp;&amp; presenter.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"presenter"</span> <span class="attr">id</span>=<span class="string">"presenter"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"presenter..."</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': duration.invalid &amp;&amp; duration.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"duration"</span>&gt;</span>Duration:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"duration.invalid &amp;&amp; duration.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">formControlName</span>=<span class="string">"duration"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>select duration...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>Half Hour<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>1 Hour<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>Half Day<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>Full Day<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': level.invalid &amp;&amp; level.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"level"</span>&gt;</span>Level:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"level.invalid &amp;&amp; level.dirty"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">formControlName</span>=<span class="string">"level"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>select level...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Beginner"</span>&gt;</span>Beginner<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Intermediate"</span>&gt;</span>Intermediate<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Advanced"</span>&gt;</span>Advanced<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'error': abstract.invalid &amp;&amp; abstract.dirty&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"abstract"</span>&gt;</span>Abstract:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"abstract.invalid &amp;&amp; abstract.dirty &amp;&amp; abstract?.errors.required"</span>&gt;</span>Required<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> *<span class="attr">ngIf</span>=<span class="string">"abstract.invalid &amp;&amp; abstract.dirty &amp;&amp; abstract?.errors.maxlength"</span>&gt;</span>Cannot exceed 400 characters<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">formControlName</span>=<span class="string">"abstract"</span> <span class="attr">id</span>=<span class="string">"abstract"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"abstract..."</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> [<span class="attr">disabled</span>]=<span class="string">"newSessionForm.invalid"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) register it in routes.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;CreateSessionComponent&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/create-session.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">    <span class="comment">//order matters</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/new'</span>, <span class="attr">component</span>: CreateEventComponent, <span class="attr">canDeactivate</span>: [<span class="string">'canDeactivateCreateEvent'</span>] &#125;, <span class="comment">//Guarding Against Route De-activation using function, canDeactivateCreateEvent is provider name which points to a function</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events'</span>, <span class="attr">component</span>: EventsListComponent, <span class="attr">resolve</span>: &#123; <span class="attr">events1</span>: EventListResolver &#125; &#125;, <span class="comment">//call EventListResolver before using the component, bind resolver result to a property events1, and this property will be passed to the component</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent, <span class="attr">canActivate</span>: [EventRouteActivator] &#125;, <span class="comment">//Guarding Against Route Activation using service</span></span><br><span class="line">+    &#123; <span class="attr">path</span>: <span class="string">'events/session/new'</span>, <span class="attr">component</span>: CreateSessionComponent &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'404'</span>, <span class="attr">component</span>: Error404Component &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/events'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;,  <span class="comment">//pathMatch: prefix or full</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// user prefix, localhost/user/x, will load module here: app/user/user.module and the module name is UserModule, concat '#'</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'user'</span>, <span class="attr">loadChildren</span>: <span class="string">'app/user/user.module#UserModule'</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Custom-Validation"><a href="#Custom-Validation" class="headerlink" title="Custom Validation"></a>Custom Validation</h3><p>create-session.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup, Validators &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ISession, restrictedWords &#125; <span class="keyword">from</span> <span class="string">'../shared/index'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'app/events/event-detail/create-session.component.html'</span>,</span><br><span class="line">    styles: [</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        em &#123;float:right;color:#e05c65;padding-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .error input, .error select, .error textarea &#123;background-color:#e3c3c5;&#125;</span></span><br><span class="line"><span class="string">        .error ::-webkit-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error ::-moz-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        .error :-ms-input-placeholder &#123;color:#999;&#125;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSessionComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    newSessionForm: FormGroup</span><br><span class="line">    name: FormControl</span><br><span class="line">    presenter: FormControl</span><br><span class="line">    duration: FormControl</span><br><span class="line">    level: FormControl</span><br><span class="line">    abstract: FormControl</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.presenter = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.duration = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required)</span><br><span class="line">        <span class="keyword">this</span>.abstract = <span class="keyword">new</span> FormControl(<span class="string">''</span>, [Validators.required, Validators.maxLength(<span class="number">400</span>), restrictedWords([<span class="string">'foo'</span>, <span class="string">'bar'</span>])])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.newSessionForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">            name: <span class="keyword">this</span>.name,</span><br><span class="line">            presenter: <span class="keyword">this</span>.presenter,</span><br><span class="line">            duration: <span class="keyword">this</span>.duration,</span><br><span class="line">            level: <span class="keyword">this</span>.level,</span><br><span class="line">            abstract: <span class="keyword">this</span>.abstract</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveSession(formValues) &#123;</span><br><span class="line">        <span class="comment">// console.log(formValues);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> session: ISession = &#123;</span><br><span class="line">            id: <span class="literal">undefined</span>,</span><br><span class="line">            name: formValues.name,</span><br><span class="line">            duration: +formValues.duration,  <span class="comment">//convert</span></span><br><span class="line">            presenter: formValues.presenter,</span><br><span class="line">            level: formValues.level,</span><br><span class="line">            abstract: formValues.abstract,</span><br><span class="line">            voters: []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(session)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//custom validation</span></span><br><span class="line">    <span class="comment">// private restrictedWords(control: FormControl): &#123; [key: string]: any &#125; &#123;</span></span><br><span class="line">    <span class="comment">//     return control.value.includes('foo')</span></span><br><span class="line">    <span class="comment">//         ? &#123; 'restrictedWords': 'foo' &#125;</span></span><br><span class="line">    <span class="comment">//         : null</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// this will be put into shared folder</span></span><br><span class="line">    <span class="comment">// private restrictedWords(words) &#123;</span></span><br><span class="line">    <span class="comment">//     return (control: FormControl): &#123; [key: string]: any &#125; =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//         if (!words) return null;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//         var invalidWords = words.map(w =&gt; control.value.includes(w) ? w : null)</span></span><br><span class="line">    <span class="comment">//             .filter(w =&gt; w != null);</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//         return invalidWords &amp;&amp; invalidWords.length &gt; 0</span></span><br><span class="line">    <span class="comment">//             ? &#123; 'restrictedWords': invalidWords.join(', ') &#125;</span></span><br><span class="line">    <span class="comment">//             : null</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shared/restricted-words.validator.ts, and don’t forget export in index.ts barrel</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;FormControl&#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">restrictedWords</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (control: FormControl): &#123; [key: string]: any &#125; =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!words) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> invalidWords = words.map(<span class="function"><span class="params">w</span> =&gt;</span> control.value.includes(w) ? w : <span class="literal">null</span>)</span><br><span class="line">            .filter(<span class="function"><span class="params">w</span> =&gt;</span> w != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invalidWords &amp;&amp; invalidWords.length &gt; <span class="number">0</span></span><br><span class="line">            ? &#123; <span class="string">'restrictedWords'</span>: invalidWords.join(<span class="string">', '</span>) &#125;</span><br><span class="line">            : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Collecting-Data-with-Forms-and-Validation&quot;&gt;&lt;a href=&quot;#Collecting-Data-with-Forms-and-Validation&quot; class=&quot;headerlink&quot; title=&quot;Collecting
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter05 -- Routing and Navigation</title>
    <link href="https://wghglory.github.io/2017/04/23/angular2-chapter05/"/>
    <id>https://wghglory.github.io/2017/04/23/angular2-chapter05/</id>
    <published>2017-04-23T10:41:42.000Z</published>
    <updated>2017-11-22T15:33:20.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Routing-and-Navigation"><a href="#Routing-and-Navigation" class="headerlink" title="Routing and Navigation"></a>Routing and Navigation</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Adding-event-detail-page"><a href="#Adding-event-detail-page" class="headerlink" title="Adding event-detail page"></a>Adding event-detail page</h3><p>1) shared/event.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    getEvents() &#123;</span><br><span class="line">        <span class="keyword">return</span> EVENTS</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add getEvent by id</span></span><br><span class="line">    getEvent(id: number) &#123;</span><br><span class="line">        <span class="keyword">return</span> EVENTS.find(<span class="function"><span class="params">e</span> =&gt;</span> e.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) <strong>Access url parameter</strong>, create app/events/event-detail/event-detail.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://localhost:8808/events/3</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'../shared/event.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ActivatedRoute&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    templateUrl: <span class="string">'/app/events/event-detail/event-detail.component.html'</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .container&#123;padding:0 20px;&#125;</span></span><br><span class="line"><span class="string">        .event-img&#123;height:100px;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDetailComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    event: any</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="comment">//+ convert string to number</span></span><br><span class="line">        <span class="keyword">this</span>.event = <span class="keyword">this</span>.eventService.getEvent(+<span class="keyword">this</span>.route.snapshot.params[<span class="string">'id'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) create its template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">"event?.imageUrl"</span> [<span class="attr">alt</span>]=<span class="string">"event?.name"</span> <span class="attr">class</span>=<span class="string">"event-img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-11"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;event?.name&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Date:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123;event?.date&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Time:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123;event?.time&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Price:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> $&#123;&#123;event?.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Address:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                &#123;&#123;event?.location?.address&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                &#123;&#123;event?.location?.city&#125;&#125;, &#123;&#123;event?.location?.country&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4) register component in module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventDetailComponent &#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-detail.component'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [AppComponent, EventsListComponent, EventThumbnailComponent, NavBarComponent, EventDetailComponent],</span><br><span class="line">    providers: [EventService, ToastrService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="Adding-Routing"><a href="#Adding-Routing" class="headerlink" title="Adding Routing"></a>Adding Routing</h3><p>1) Current app load component like below (app.component.ts). It has <code>nav-bar</code> and <code>events-list</code> components. <code>Nav-bar</code> should show all the time while <code>events-list</code> should show only when url is “/“, so we should remove <code>events-list</code> and use <code>router-outlet</code> instead.</p><p>old app.component.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-app'</span>,</span><br><span class="line">    template: <span class="string">`&lt;nav-bar&gt;&lt;/nav-bar&gt;&lt;events-list&gt;&lt;/events-list&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>new app.component.ts using router:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-app'</span>,</span><br><span class="line">    template: <span class="string">`&lt;nav-bar&gt;&lt;/nav-bar&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2) create app/routes.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Routes&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventsListComponent&#125; <span class="keyword">from</span> <span class="string">'./events/events-list.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventDetailComponent&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-detail.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events'</span>, <span class="attr">component</span>: EventsListComponent &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/events'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;  <span class="comment">//pathMatch: prefix or full</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3) register routes array and Router module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; appRoutes &#125; <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [BrowserModule, RouterModule.forRoot(appRoutes)],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>4) tell angular where app is hosted. Add base in index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Linking-to-Routes"><a href="#Linking-to-Routes" class="headerlink" title="Linking to Routes"></a>Linking to Routes</h3><p>events-list any thumbnail click =&gt; specific events/id page<br>nav-bar “allEvents” click =&gt; load all events: localhost/</p><p>event-thumbnail.component.ts: <code>[routerLink]=&quot;[&#39;/events&#39;, event.id]&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events', event.id]"</span> <span class="attr">class</span>=<span class="string">"well hoverwell thumbnail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Event: &#123;&#123;event?.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Price: \$&#123;&#123;event?.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Date: &#123;&#123;event?.date&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nav.component.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events']"</span>&gt;</span>All Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Navigating-from-Code"><a href="#Navigating-from-Code" class="headerlink" title="Navigating from Code"></a>Navigating from Code</h3><p>1) create events/create-event.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//click cancel will use router to navigate to /events (load all events)</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Router&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;New Event&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="col-md-6"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;[Create Event Form will go here]&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="submit" class="btn btn-primary"&gt;Save&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="button" class="btn btn-default" (click)="cancel()"&gt;Cancel&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEventComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private router:Router)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    cancel()&#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'/events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) update routes.ts with CreateEventComponent and route <code>events/new</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Routes&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventsListComponent&#125; <span class="keyword">from</span> <span class="string">'./events/events-list.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventDetailComponent&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-detail.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;CreateEventComponent&#125; <span class="keyword">from</span> <span class="string">'./events/create-event.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/new'</span>, <span class="attr">component</span>: CreateEventComponent &#125;, <span class="comment">//order matters</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events'</span>, <span class="attr">component</span>: EventsListComponent &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/events'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;  <span class="comment">//pathMatch: prefix or full</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3) nav/nav.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events']"</span>&gt;</span>All Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events/new']"</span>&gt;</span>Create Event<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4) register component in module:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CreateEventComponent&#125; <span class="keyword">from</span> <span class="string">'./events/create-event.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; appRoutes &#125; <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [BrowserModule, RouterModule.forRoot(appRoutes)],</span><br><span class="line">    declarations: [AppComponent, EventsListComponent, EventThumbnailComponent, NavBarComponent, EventDetailComponent, CreateEventComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="Guarding-Against-Route-Activation-Invalid-event-id-like-1000-which-doesn’t-exist-navigate-to-404"><a href="#Guarding-Against-Route-Activation-Invalid-event-id-like-1000-which-doesn’t-exist-navigate-to-404" class="headerlink" title="Guarding Against Route Activation (Invalid event id like 1000 which doesn’t exist, navigate to 404)"></a>Guarding Against Route Activation (Invalid event id like 1000 which doesn’t exist, navigate to 404)</h3><p>1) create errors/404.component.ts, register module, register router</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h1 class="errorMessage"&gt;404'd&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .errorMessage &#123;</span></span><br><span class="line"><span class="string">             margin-top:150px;</span></span><br><span class="line"><span class="string">             font-size: 170px;</span></span><br><span class="line"><span class="string">             text-align: center;</span></span><br><span class="line"><span class="string">        &#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Error404Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) create events/event-detail/event-route-activator.service.ts and register this EventRouteActivator service into app.module.ts providers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, ActivatedRouteSnapshot, CanActivate &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; EventService&#125; <span class="keyword">from</span> <span class="string">'../shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventRouteActivator</span> <span class="title">implements</span> <span class="title">CanActivate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    canActivate(route: ActivatedRouteSnapshot) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventExists = !!<span class="keyword">this</span>.eventService.getEvent(+route.params[<span class="string">'id'</span>])  <span class="comment">//+ convert</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!eventExists)</span><br><span class="line">            <span class="keyword">this</span>.router.navigate([<span class="string">'/404'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> eventExists</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Error404Component &#125; <span class="keyword">from</span> <span class="string">'./errors/404.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123; EventRouteActivator &#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-route-activator.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; appRoutes &#125; <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [BrowserModule, RouterModule.forRoot(appRoutes)],</span><br><span class="line">    declarations: [</span><br><span class="line">        AppComponent,</span><br><span class="line">        NavBarComponent,</span><br><span class="line">        EventsListComponent, EventThumbnailComponent, EventDetailComponent, CreateEventComponent,</span><br><span class="line">        Error404Component</span><br><span class="line">    ],</span><br><span class="line">+    providers: [EventService, ToastrService, EventRouteActivator],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>3) routes.ts add canActivate and EventRouteActivator service</p><blockquote><p>note: route canActivate can use both service and function. Here we’re using service</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Routes&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventsListComponent&#125; <span class="keyword">from</span> <span class="string">'./events/events-list.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventDetailComponent&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-detail.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;CreateEventComponent&#125; <span class="keyword">from</span> <span class="string">'./events/create-event.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Error404Component&#125; <span class="keyword">from</span> <span class="string">'./errors/404.component'</span></span><br><span class="line"></span><br><span class="line">+ <span class="keyword">import</span> &#123;EventRouteActivator&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-route-activator.service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/new'</span>, <span class="attr">component</span>: CreateEventComponent &#125;, <span class="comment">//order matters</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events'</span>, <span class="attr">component</span>: EventsListComponent &#125;,</span><br><span class="line">+    &#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent, <span class="attr">canActivate</span>: [EventRouteActivator] &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'404'</span>, <span class="attr">component</span>: Error404Component &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/events'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;  <span class="comment">//pathMatch: prefix or full</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Guarding-Against-Route-De-activation-User-navigates-to-other-url-before-saving-data-like-cancel-button-clicking"><a href="#Guarding-Against-Route-De-activation-User-navigates-to-other-url-before-saving-data-like-cancel-button-clicking" class="headerlink" title="Guarding Against Route De-activation (User navigates to other url before saving data, like cancel button clicking)"></a>Guarding Against Route De-activation (User navigates to other url before saving data, like cancel button clicking)</h3><p>1) routes.ts add canDeactivate, and we’re using function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Routes&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventsListComponent&#125; <span class="keyword">from</span> <span class="string">'./events/events-list.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventDetailComponent&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-detail.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123;CreateEventComponent&#125; <span class="keyword">from</span> <span class="string">'./events/create-event.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Error404Component&#125; <span class="keyword">from</span> <span class="string">'./errors/404.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;EventRouteActivator&#125; <span class="keyword">from</span> <span class="string">'./events/event-detail/event-route-activator.service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">+    &#123; <span class="attr">path</span>: <span class="string">'events/new'</span>, <span class="attr">component</span>: CreateEventComponent, <span class="attr">canDeactivate</span>: [<span class="string">'canDeactivateCreateEvent'</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events'</span>, <span class="attr">component</span>: EventsListComponent &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent, <span class="attr">canActivate</span>: [EventRouteActivator] &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'404'</span>, <span class="attr">component</span>: Error404Component &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/events'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;  <span class="comment">//pathMatch: prefix or full</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>We defined <code>canDeactivateCreateEvent</code> function, and we should register this in module’s providers. Now our providers are like <code>providers: [EventService, ToastrService, EventRouteActivator]</code>. Actually we already used the shorthand way for providers. Take EventService for instance, the longhand is <code>providers: [{provide:EventService, useValue:EventService}]</code>. So below is how we register the <code>canDeactivateCreateEvent</code> function into the providers.</p><p>app.module.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [BrowserModule, RouterModule.forRoot(appRoutes)],</span><br><span class="line">    declarations: [</span><br><span class="line">        AppComponent,</span><br><span class="line">        NavBarComponent,</span><br><span class="line">        EventsListComponent, EventThumbnailComponent, EventDetailComponent, CreateEventComponent,</span><br><span class="line">        Error404Component</span><br><span class="line">    ],</span><br><span class="line">    providers: [</span><br><span class="line">        EventService,</span><br><span class="line">        ToastrService,</span><br><span class="line">        EventRouteActivator,</span><br><span class="line">+        &#123;</span><br><span class="line">+            provide: <span class="string">'canDeactivateCreateEvent'</span>,</span><br><span class="line">+            useValue: checkDirtyState</span><br><span class="line">+        &#125;</span><br><span class="line">    ],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this function can be defined in another file</span></span><br><span class="line">+<span class="function"><span class="keyword">function</span> <span class="title">checkDirtyState</span>(<span class="params">component: CreateEventComponent</span>) </span>&#123;</span><br><span class="line">+    <span class="keyword">if</span>(component.isDirty)&#123;</span><br><span class="line">+        <span class="keyword">return</span> confirm(<span class="string">'you haven\'t save the event. Are you sure to cancel?'</span>)</span><br><span class="line">+    &#125;</span><br><span class="line">+    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure><p>2) create-event.component.ts add isDirty</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//click cancel will use router to navigate to /events (load all events)</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Router&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEventComponent</span> </span>&#123;</span><br><span class="line">+    isDirty: boolean = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    cancel() &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="string">'/events'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pre-loading-Data-for-Components"><a href="#Pre-loading-Data-for-Components" class="headerlink" title="Pre-loading Data for Components"></a>Pre-loading Data for Components</h3><p>In real world, we may have some delay to receive data from ajax call. To show this issue,</p><p>1) simulate ajax loading data in event.service.ts, so it takes 2 second to get data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; Subject &#125; <span class="keyword">from</span> <span class="string">'rxjs/RX'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    getEvents() &#123;</span><br><span class="line">        <span class="comment">//simulate async loading data operation, return subject. Need to change events-list.component.ts</span></span><br><span class="line">+        <span class="keyword">let</span> subject = <span class="keyword">new</span> Subject()</span><br><span class="line">+        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">+            subject.next(EVENTS);</span><br><span class="line">+            subject.complete();</span><br><span class="line">+        &#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">+        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) in events-list.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">+    events: any   <span class="comment">//before was events: any[], now compiler won't complain</span></span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">-        <span class="comment">// this.events = this.eventService.getEvents()</span></span><br><span class="line">+        <span class="keyword">this</span>.eventService.getEvents().subscribe(<span class="function"><span class="params">events</span> =&gt;</span> &#123; <span class="keyword">this</span>.events = events &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when we navigate to base page, we can immediately see <code>&lt;h1&gt;Upcoming Angular 2 Events&lt;/h1&gt;</code>, but it takes 2 second before showing data. Similar issue is like table header shows immediately but data is still loading. So we will use a resolver to make sure the template html along with data will be loaded once at the same time</p><p>3) create events-list-resolver.service.ts and then register provider in module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Resolve&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'./shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventListResolver</span> <span class="title">implements</span> <span class="title">Resolve</span>&lt;<span class="title">any</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve() &#123;</span><br><span class="line">        <span class="comment">// map() return Observable; subscribe() return subscription</span></span><br><span class="line">        <span class="comment">// in resolve, we need to return Observable. angular can watch Observable and see if it finishes</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.eventService.getEvents().map(<span class="function"><span class="params">events</span> =&gt;</span> events);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) use resolver in the routes by <code>resolve: { events:1 EventListResolver }</code>. events1 is property that will be passed to component after calling Resolver.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123;EventListResolver&#125; <span class="keyword">from</span> <span class="string">'./events/events-list-resolver.service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">    <span class="comment">//order matters</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/new'</span>, <span class="attr">component</span>: CreateEventComponent, <span class="attr">canDeactivate</span>: [<span class="string">'canDeactivateCreateEvent'</span>] &#125;, <span class="comment">//Guarding Against Route De-activation using function, canDeactivateCreateEvent is provider name which points to a function</span></span><br><span class="line">+    &#123; <span class="attr">path</span>: <span class="string">'events'</span>, <span class="attr">component</span>: EventsListComponent, <span class="attr">resolve</span>: &#123; <span class="attr">events1</span>: EventListResolver &#125; &#125;, <span class="comment">//call EventListResolver before using the component, bind resolver result to a property events1, and this property will be passed to the component</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'events/:id'</span>, <span class="attr">component</span>: EventDetailComponent, <span class="attr">canActivate</span>: [EventRouteActivator] &#125;, <span class="comment">//Guarding Against Route Activation using service</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'404'</span>, <span class="attr">component</span>: Error404Component &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/events'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;  <span class="comment">//pathMatch: prefix or full</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>5) consume the events property in events-list.component</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ActivatedRoute&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    events: any[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private toastrService: ToastrService, private route: ActivatedRoute) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="comment">// // this.events = this.eventService.getEvents()</span></span><br><span class="line">        <span class="comment">// this.eventService.getEvents().subscribe(events =&gt; &#123; this.events = events &#125;)  //since we are using resolver</span></span><br><span class="line">        <span class="keyword">this</span>.events = <span class="keyword">this</span>.route.snapshot.data[<span class="string">'events1'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Styling-Active-Links"><a href="#Styling-Active-Links" class="headerlink" title="Styling Active Links"></a>Styling Active Links</h3><p>1) define active class in nav.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'nav-bar'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/nav/nav.component.html'</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .nav.navbar-nav &#123;font-size:15px;&#125;</span></span><br><span class="line"><span class="string">        #searchForm &#123;margin-right:100px;&#125;</span></span><br><span class="line"><span class="string">        @media(max-width:1200px) &#123;#searchForm &#123;display:none;&#125;&#125;</span></span><br><span class="line"><span class="string">+        li&gt;a.active&#123;color:#f97924;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NavBarComponent</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>2) in nav.component.html add <code>routerLinkActive=&quot;active&quot;</code></p><p>When navigating to events/new, both will have active class by default. This is because routerLinkActive finds both start with <strong>/events</strong>. So we also add <code>[routerLinkActiveOptions]=&quot;{exact:true}&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events']"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span> [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">"&#123;exact:true&#125;"</span>&gt;</span>All Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/events/new']"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>Create Event<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Lazily-Loading-Feature-Modules"><a href="#Lazily-Loading-Feature-Modules" class="headerlink" title="Lazily Loading Feature Modules"></a>Lazily Loading Feature Modules</h3><p>For now we only have 1 module.</p><p>let’s create a user profile and since user is different part of our app, we want to use another lazily loading feature module. This module will be loaded only when user navigates to the module, so it affects the performance for a larger application.</p><p>1) user/user.module.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span></span><br><span class="line"><span class="keyword">import</span> &#123;userRoutes&#125; <span class="keyword">from</span> <span class="string">'./user.routes'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ProfileComponent&#125; <span class="keyword">from</span> <span class="string">'./profile.component'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [</span><br><span class="line">        CommonModule,</span><br><span class="line">        RouterModule.forChild(userRoutes)</span><br><span class="line">    ],</span><br><span class="line">    declarations: [</span><br><span class="line">        ProfileComponent</span><br><span class="line">    ],</span><br><span class="line">    providers: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    bootstrap: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>2) user/profile.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Edit Your Profile&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="col-md-6"&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;[Edit profile form will go here]&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;br /&gt;</span></span><br><span class="line"><span class="string">      &lt;br /&gt;</span></span><br><span class="line"><span class="string">      &lt;button type="submit" class="btn btn-primary"&gt;Save&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button type="button" class="btn btn-default"&gt;Cancel&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileComponent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>3) user/user.routes.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ProfileComponent&#125; <span class="keyword">from</span> <span class="string">'./profile.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userRoutes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'profile'</span>, <span class="attr">component</span>: ProfileComponent &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4) In routes.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// user prefix, localhost/user/x, will load module here: app/user/user.module and the module name is UserModule, concat '#'</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'user'</span>, <span class="attr">loadChildren</span>: <span class="string">'app/user/user.module#UserModule'</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>5) in nav/nav.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['user/profile']"</span>&gt;</span>Welcome Guanghui<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Organizing-Your-Exports-with-Barrels"><a href="#Organizing-Your-Exports-with-Barrels" class="headerlink" title="Organizing Your Exports with Barrels"></a>Organizing Your Exports with Barrels</h3><p>Now our app.component.ts has too many import, we can use Barrels to simplify the <strong>Event</strong> import</p><p>1) create index.ts under events folder and its subfolder. In this case, there should be 3 index.ts</p><p>events/index.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./create-event.component'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event-thumbnail.component'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./events-list-resolver.service'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./events-list.component'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./shared/index'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event-detail/index'</span></span><br></pre></td></tr></table></figure><p>events/shared/index.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event.service'</span></span><br></pre></td></tr></table></figure><p>events/event-detail/index.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event-detail.component'</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./event-route-activator.service'</span></span><br></pre></td></tr></table></figure><p>2) delete all event related import, and use below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    EventsListComponent,</span><br><span class="line">    EventThumbnailComponent,</span><br><span class="line">    EventDetailComponent,</span><br><span class="line">    CreateEventComponent,</span><br><span class="line">    EventRouteActivator,</span><br><span class="line">    EventService,</span><br><span class="line">    EventListResolver</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./events/index'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Routing-and-Navigation&quot;&gt;&lt;a href=&quot;#Routing-and-Navigation&quot; class=&quot;headerlink&quot; title=&quot;Routing and Navigation&quot;&gt;&lt;/a&gt;Routing and Navigati
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter04 -- Create Services</title>
    <link href="https://wghglory.github.io/2017/04/22/angular2-chapter04/"/>
    <id>https://wghglory.github.io/2017/04/22/angular2-chapter04/</id>
    <published>2017-04-22T03:41:45.000Z</published>
    <updated>2017-11-22T15:33:20.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Create-Services"><a href="#Create-Services" class="headerlink" title="Create Services"></a>Create Services</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Services-and-Dependency-Injection"><a href="#Services-and-Dependency-Injection" class="headerlink" title="Services and Dependency Injection"></a>Services and Dependency Injection</h3><p>1) create shared/event.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include this in module.ts providers</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    getEvents() &#123;</span><br><span class="line">        <span class="keyword">return</span> EVENTS</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EVENTS = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'Angular Connect'</span>,</span><br><span class="line">        date: <span class="string">'9/26/2036'</span>,</span><br><span class="line">        time: <span class="string">'10:00 am'</span>,</span><br><span class="line">        price: <span class="number">599.99</span>,</span><br><span class="line">        imageUrl: <span class="string">'/app/assets/images/angularconnect-shield.png'</span>,</span><br><span class="line">        location: &#123;</span><br><span class="line">            address: <span class="string">'1057 DT'</span>,</span><br><span class="line">            city: <span class="string">'London'</span>,</span><br><span class="line">            country: <span class="string">'England'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2) events-list.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OnInit is like interface which class must implements ngOnInit method</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="comment">// import service</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'./shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-list'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/events/events-list.component.html'</span>   <span class="comment">//relative to index.html</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    events: any[]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI</span></span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.events = <span class="keyword">this</span>.eventService.getEvents()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) bind service to providers in module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventService &#125; <span class="keyword">from</span> <span class="string">'./events/shared/event.service'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [AppComponent, EventsListComponent, EventThumbnailComponent, NavBarComponent],</span><br><span class="line">    providers: [EventService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="Wrapping-Third-Party-Services"><a href="#Wrapping-Third-Party-Services" class="headerlink" title="Wrapping Third Party Services"></a>Wrapping Third Party Services</h3><p>Feature: Clicking each thumbnail will toastr event name</p><p>We’re going to use toastr as 3rd party library. After installation, include toastr js and css into index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install toastr --save</span><br></pre></td></tr></table></figure><p>1) create common/toastr.service.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//I guess this local variable was assigned the global toastr variable</span></span><br><span class="line">declare <span class="keyword">let</span> toastr: any</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastrService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    success(message: string, title?: string) &#123;</span><br><span class="line">        toastr.success(message, title);</span><br><span class="line">    &#125;</span><br><span class="line">    info(message: string, title?: string) &#123;</span><br><span class="line">        toastr.info(message, title);</span><br><span class="line">    &#125;</span><br><span class="line">    error(message: string, title?: string) &#123;</span><br><span class="line">        toastr.error(message, title);</span><br><span class="line">    &#125;</span><br><span class="line">    warning(message: string, title?: string) &#123;</span><br><span class="line">        toastr.warning(message, title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) events-list.component.ts inject toastr service, and create toastrName function passing event name</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OnInit is like interface which class must implements ngOnInit method</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventService&#125; <span class="keyword">from</span> <span class="string">'./shared/event.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ToastrService&#125; <span class="keyword">from</span> <span class="string">'../common/toastr.service'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-list'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/events/events-list.component.html'</span>   <span class="comment">//relative to index.html</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    events: any[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private eventService: EventService, private toastrService: ToastrService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.events = <span class="keyword">this</span>.eventService.getEvents()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toastrName(data)&#123;</span><br><span class="line">        <span class="keyword">this</span>.toastrService.success(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wire toastrName function in events-list.component template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Upcoming Angular 2 Events<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span> *<span class="attr">ngFor</span>=<span class="string">"let e of events"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">event-thumbnail</span> [<span class="attr">event</span>]=<span class="string">"e"</span> (<span class="attr">click</span>)=<span class="string">"toastrName(e.name)"</span>&gt;</span><span class="tag">&lt;/<span class="name">event-thumbnail</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3) include ToastrService in module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventService &#125; <span class="keyword">from</span> <span class="string">'./events/shared/event.service'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ToastrService &#125; <span class="keyword">from</span> <span class="string">'./common/toastr.service'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [AppComponent, EventsListComponent, EventThumbnailComponent, NavBarComponent],</span><br><span class="line">    providers: [EventService, ToastrService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Create-Services&quot;&gt;&lt;a href=&quot;#Create-Services&quot; class=&quot;headerlink&quot; title=&quot;Create Services&quot;&gt;&lt;/a&gt;Create Services&lt;/h1&gt;&lt;p&gt;Check code at: &lt;a 
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter03 -- Exploring the New Template Syntax</title>
    <link href="https://wghglory.github.io/2017/04/21/angular2-chapter03/"/>
    <id>https://wghglory.github.io/2017/04/21/angular2-chapter03/</id>
    <published>2017-04-21T03:41:45.000Z</published>
    <updated>2017-11-22T15:33:20.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exploring-the-New-Template-Syntax"><a href="#Exploring-the-New-Template-Syntax" class="headerlink" title="Exploring the New Template Syntax"></a>Exploring the New Template Syntax</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="ngFor"><a href="#ngFor" class="headerlink" title="*ngFor"></a>*ngFor</h3><p>events-list.Component has events array: [event] is child component object name</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-list'</span>,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;h1&gt;Upcoming Angular 2 Events&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class="col-md-5" *ngFor="let e of events"&gt;</span></span><br><span class="line"><span class="string">                            &lt;event-thumbnail [event]="e"&gt;&lt;/event-thumbnail&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> </span>&#123;</span><br><span class="line">    events = [</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'Angular Connect'</span>,</span><br><span class="line">            date: <span class="string">'9/26/2036'</span>,</span><br><span class="line">            time: <span class="string">'10:00 am'</span>,</span><br><span class="line">            price: <span class="number">599.99</span>,</span><br><span class="line">            imageUrl: <span class="string">'/app/assets/images/angularconnect-shield.png'</span>,</span><br><span class="line">            location: &#123;</span><br><span class="line">                address: <span class="string">'1057 DT'</span>,</span><br><span class="line">                city: <span class="string">'London'</span>,</span><br><span class="line">                country: <span class="string">'England'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>event-thumbnail.component:</p><blockquote><p>Note: event? will not throw err if event is null</p><p><code>event?.location.address</code> doesn’t need <code>location?</code>, <code>event?</code> is good enough</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Input&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'event-thumbnail'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="well hoverwell thumbnail"&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Event: &#123;&#123;event?.name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Price: \$&#123;&#123;event?.price&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Date: &#123;&#123;event?.date&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Time: &#123;&#123;event?.time&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Address: &#123;&#123;event?.location.address&#125;&#125;, &#123;&#123;event?.location.city&#125;&#125;, &#123;&#123;event?.location.country&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .thumbnail&#123;min-height:210px;&#125;</span></span><br><span class="line"><span class="string">        .margin-left&#123;margin-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .well div&#123;color:#bbb;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventThumbnailComponent</span> </span>&#123;</span><br><span class="line">    @Input() event: any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ngIf-–-will-comment-out-the-dom-performance-factor"><a href="#ngIf-–-will-comment-out-the-dom-performance-factor" class="headerlink" title="*ngIf – will comment out the dom, performance factor"></a>*ngIf – will comment out the dom, performance factor</h3><blockquote><p>if we know each event is not null, but some of them has location property, some don’t but have onlineUrl property, in this case, we should use <code>event.location?.address</code></p></blockquote><p>if events array has 2 element, first has location but not onlineUrl, second has onlineUrl but not location.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Input&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'event-thumbnail'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="well hoverwell thumbnail"&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Event: &#123;&#123;event?.name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Price: \$&#123;&#123;event?.price&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Date: &#123;&#123;event?.date&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Time: &#123;&#123;event?.time&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div *ngIf="event?.location"&gt;Address: &#123;&#123;event?.location?.address&#125;&#125;, &#123;&#123;event?.location?.city&#125;&#125;, &#123;&#123;event?.location?.country&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div *ngIf="event?.onlineUrl"&gt;Online Url: &#123;&#123;event?.onlineUrl&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .thumbnail&#123;min-height:210px;&#125;</span></span><br><span class="line"><span class="string">        .margin-left&#123;margin-left:10px;&#125;</span></span><br><span class="line"><span class="string">        .well div&#123;color:#bbb;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventThumbnailComponent</span> </span>&#123;</span><br><span class="line">    @Input() event: any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hidden"><a href="#hidden" class="headerlink" title="[hidden]"></a>[hidden]</h3><p>the above *ngIf code can be replaced by [hidden], but ngif performance is better than hidden in this case:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!event?.location"</span>&gt;</span>Address: &#123;&#123;event?.location?.address&#125;&#125;, &#123;&#123;event?.location?.city&#125;&#125;, &#123;&#123;event?.location?.country&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!event?.onlineUrl"</span>&gt;</span>Online Url: &#123;&#123;event?.onlineUrl&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>when you don’t want to render a heavy DOM element, use *ngIf, so element comments out<br>when the element frequently shows/hides, use [hidden], so element style display none</p></blockquote><h3 id="ngSwtich"><a href="#ngSwtich" class="headerlink" title="[ngSwtich]"></a>[ngSwtich]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'event-thumbnail'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div [ngSwitch]="event?.time"&gt;</span></span><br><span class="line"><span class="string">                Time: &#123;&#123;event?.time&#125;&#125;</span></span><br><span class="line"><span class="string">                &lt;span *ngSwitchCase="'8:00 am'"&gt;(Early Start)&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span *ngSwitchCase="'10:00 am'"&gt;(Late Start)&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span *ngSwitchDefault&gt;(Normal Start)&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ngClass"><a href="#ngClass" class="headerlink" title="[ngClass]"></a>[ngClass]</h3><p>1) will add yellow class if <code>event?.time === &#39;8:00 am&#39;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'event-thumbnail'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div [class.yellow]="event?.time === '8:00 am'"&gt;</span></span><br><span class="line"><span class="string">                Time: &#123;&#123;event?.time&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .yellow&#123;color:yellow !important;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2) what if we need to add 2 classes? use ngClass</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'event-thumbnail'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div [ngClass]="&#123;yellow:event?.time === '8:00 am',bold:event?.time === '8:00 am'&#125;"&gt;</span></span><br><span class="line"><span class="string">                Time: &#123;&#123;event?.time&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .yellow&#123;color:yellow !important;&#125;</span></span><br><span class="line"><span class="string">        .bold&#123;font-weight:800;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3) use function after ngClass</p><ul><li>ngClass won’t affect native class</li><li>ngClass can take string, array, object</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div class="notaffected" [ngClass]="getClasses()"&gt;</span></span><br><span class="line"><span class="string">                Time: &#123;&#123;event?.time&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .yellow&#123;color:yellow !important;&#125;</span></span><br><span class="line"><span class="string">        .bold&#123;font-weight:800;&#125;</span></span><br><span class="line"><span class="string">        .notaffected&#123;font-size:18px;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventThumbnailComponent</span> </span>&#123;</span><br><span class="line">    getClasses() &#123;</span><br><span class="line">        <span class="comment">// const isEarly = this.event &amp;&amp; this.event.time === '8:00 am';</span></span><br><span class="line">        <span class="comment">// return &#123; yellow: isEarly, bold: isEarly &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (this.event &amp;&amp; this.event.time === '8:00 am')</span></span><br><span class="line">        <span class="comment">//     return 'yellow bold';</span></span><br><span class="line">        <span class="comment">// return '';</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.event &amp;&amp; <span class="keyword">this</span>.event.time === <span class="string">'8:00 am'</span>)</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'yellow'</span>, <span class="string">'bold'</span>]</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ngStyle"><a href="#ngStyle" class="headerlink" title="[ngStyle]"></a>[ngStyle]</h3><p>1) only 1 style: use [style.property]=””</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">style.text-decoration</span>]=<span class="string">"event?.time === '8:00 am'?'underline':'normal'"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) multiple styles by ngStyle</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, Input&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'event-thumbnail'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;!--&lt;div [ngStyle]="&#123;'text-decoration':event?.time === '8:00 am'?'underline':'normal','font-style':'italic'&#125;" --&gt;</span></span><br><span class="line"><span class="string">            &lt;div [ngStyle]="getStyles()"&gt;</span></span><br><span class="line"><span class="string">                Time: &#123;&#123;event?.time&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventThumbnailComponent</span> </span>&#123;</span><br><span class="line">    getStyles(): any &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.event &amp;&amp; <span class="keyword">this</span>.event.time === <span class="string">'8:00 am'</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="string">'text-decoration'</span>: <span class="string">'underline'</span>, <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exploring-the-New-Template-Syntax&quot;&gt;&lt;a href=&quot;#Exploring-the-New-Template-Syntax&quot; class=&quot;headerlink&quot; title=&quot;Exploring the New Template
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter02 -- Creating and Communicating Between Components</title>
    <link href="https://wghglory.github.io/2017/04/20/angular2-chapter02/"/>
    <id>https://wghglory.github.io/2017/04/20/angular2-chapter02/</id>
    <published>2017-04-20T01:11:47.000Z</published>
    <updated>2017-11-22T15:33:20.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Creating-and-Communicating-Between-Components"><a href="#Creating-and-Communicating-Between-Components" class="headerlink" title="Creating and Communicating Between Components"></a>Creating and Communicating Between Components</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h2 id="Creating-Our-First-Data-bound-Component"><a href="#Creating-Our-First-Data-bound-Component" class="headerlink" title="Creating Our First Data-bound Component"></a>Creating Our First Data-bound Component</h2><p>1) create events/events-list.component.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-list'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Upcoming Angular 2 Events&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="well hoverwell thumbnail"&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Event: &#123;&#123;event.name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Price: \$&#123;&#123;event.price&#125;&#125;&lt;/div&gt;     //in ts file must use \$ as $!</span></span><br><span class="line"><span class="string">            &lt;div&gt;Date: &#123;&#123;event.date&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Time: &#123;&#123;event.time&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;Address: &#123;&#123;event.location.address&#125;&#125;, &#123;&#123;event.location.city&#125;&#125;, &#123;&#123;event.location.country&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> </span>&#123;</span><br><span class="line">    event = &#123;</span><br><span class="line">        name: <span class="string">'ngConf 2025'</span>,</span><br><span class="line">        date: <span class="string">'3/1/2025'</span>,</span><br><span class="line">        time: <span class="string">'8am'</span>,</span><br><span class="line">        price: <span class="string">'599'</span>,</span><br><span class="line">        location: &#123; <span class="attr">address</span>: <span class="string">'123 Main St'</span>, <span class="attr">city</span>: <span class="string">'Salt Lake City, UT'</span>, <span class="attr">country</span>: <span class="string">'USA'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) modify app.component.ts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-app'</span>,</span><br><span class="line">-    <span class="comment">// template: '&lt;h2&gt;hello world&lt;/h2&gt;'</span></span><br><span class="line">+    template: <span class="string">'&lt;events-list&gt;&lt;/events-list&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>3) update module:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; EventsListComponent &#125; <span class="keyword">from</span> <span class="string">'./events/events-list.component'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [BrowserModule],</span><br><span class="line">+   declarations: [AppComponent, EventsListComponent],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Using-External-Templates"><a href="#Using-External-Templates" class="headerlink" title="Using External Templates"></a>Using External Templates</h2><p>1) create events-list.component.html as template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Upcoming Angular 2 Events<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well hoverwell thumbnail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Event: &#123;&#123;event.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Price: $&#123;&#123;event.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- no need \$ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Date: &#123;&#123;event.date&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Time: &#123;&#123;event.time&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Address: &#123;&#123;event.location.address&#125;&#125;, &#123;&#123;event.location.city&#125;&#125;, &#123;&#123;event.location.country&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) modify events-list.component.ts using templateUrl instead of template:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-list'</span>,</span><br><span class="line">-    <span class="comment">// template: ``</span></span><br><span class="line">+    templateUrl: <span class="string">'app/events/events-list.component.html'</span>   <span class="comment">//relative to index.html</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> </span>&#123;</span><br><span class="line">    event = &#123;</span><br><span class="line">        name: <span class="string">'ngConf 2025'</span>,</span><br><span class="line">        date: <span class="string">'3/1/2025'</span>,</span><br><span class="line">        time: <span class="string">'8am'</span>,</span><br><span class="line">        price: <span class="string">'599'</span>,</span><br><span class="line">        location: &#123; <span class="attr">address</span>: <span class="string">'123 Main St'</span>, <span class="attr">city</span>: <span class="string">'Salt Lake City, UT'</span>, <span class="attr">country</span>: <span class="string">'USA'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Components-Interaction"><a href="#Components-Interaction" class="headerlink" title="Components Interaction"></a>Components Interaction</h2><h3 id="1-Communicating-with-Child-Components-Using-Input-Parent-pass-data-to-child"><a href="#1-Communicating-with-Child-Components-Using-Input-Parent-pass-data-to-child" class="headerlink" title="1. Communicating with Child Components Using @Input (Parent pass data to child)"></a>1. Communicating with Child Components Using @Input (Parent pass data to child)</h3><p>I want to create a address component as a child component. The parent component, events-list, will pass the event object to the child. To get this done:</p><ul><li>child component needs import Input from angular/core</li><li>parent template uses the child selector, and [child object name] = “parent”</li></ul><p>1) create child component events-address.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//child component, talk with parent events-list.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component,Input&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-address'</span>,</span><br><span class="line">    template: <span class="string">'&lt;span&gt;&#123;&#123;address.address&#125;&#125;,&#123;&#123;address.city&#125;&#125;,&#123;&#123;address.country&#125;&#125;&lt;/span&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsAddressComponent</span></span>&#123;</span><br><span class="line">    @Input() address:any  <span class="comment">//define address object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) modify parent component template, [address] is child object name, “event.location” is parent data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Upcoming Angular 2 Events<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well hoverwell thumbnail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Event: &#123;&#123;event.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Price: $&#123;&#123;event.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Date: &#123;&#123;event.date&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Time: &#123;&#123;event.time&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div&gt;Address: &#123;&#123;event.location.address&#125;&#125;, &#123;&#123;event.location.city&#125;&#125;, &#123;&#123;event.location.country&#125;&#125;&lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">events-address</span> [<span class="attr">address</span>]=<span class="string">"event.location"</span>&gt;</span><span class="tag">&lt;/<span class="name">events-address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3) import child component to app.module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventsAddressComponent &#125; <span class="keyword">from</span> <span class="string">'./events/events-address.component'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [AppComponent, EventsListComponent, EventsAddressComponent],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-Communicating-with-Parent-Components-Using-Output-and-EventEmitter-child-pass-data-to-parent"><a href="#2-Communicating-with-Parent-Components-Using-Output-and-EventEmitter-child-pass-data-to-parent" class="headerlink" title="2. Communicating with Parent Components Using @Output and EventEmitter (child pass data to parent)"></a>2. Communicating with Parent Components Using @Output and EventEmitter (child pass data to parent)</h3><p>1) child component “events-address.component.ts”:</p><ul><li>import Output, EventEmitter</li><li>define a variable accepting EventEmitter</li><li>define buttonClick</li><li>the EventEmitter variable emit any data from child component</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//child component, talk with parent events-list.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component, Output, EventEmitter&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-address'</span>,</span><br><span class="line">    template: <span class="string">'&lt;button (click)="buttonClick()"&gt;Click me!&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsAddressComponent</span></span>&#123;</span><br><span class="line">    @Output() myclick = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"></span><br><span class="line">    buttonClick()&#123;</span><br><span class="line">        <span class="keyword">this</span>.myclick.emit(<span class="string">'I am from child component, should pass data to parent component'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) parent Component “events-list.component.ts”:</p><ul><li><p>update template: (the EventEmitter variable name defined in child component) = “randomFuncInParent($event)”</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">events-address</span> (<span class="attr">myclick</span>)=<span class="string">"clickWithAnyName($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">events-address</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>define random function in parent component class</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsListComponent</span> </span>&#123;</span><br><span class="line">    clickWithAnyName(dataFromChild)&#123;</span><br><span class="line">        alert(dataFromChild)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Using-Template-Variables-To-Interact-with-Child-Components-parent-access-to-child-data-easier-than-method-2"><a href="#3-Using-Template-Variables-To-Interact-with-Child-Components-parent-access-to-child-data-easier-than-method-2" class="headerlink" title="3. Using Template Variables To Interact with Child Components (parent access to child data, easier than method 2)"></a>3. Using Template Variables To Interact with Child Components (parent access to child data, easier than method 2)</h3><p>1) child component events-address.component.ts define public property and method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//child component, talk with parent events-list.component.ts</span></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'events-address'</span>,</span><br><span class="line">    template: <span class="string">''</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsAddressComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//use template variable to interact with child public method/property: parent accesses child data</span></span><br><span class="line">    author:string = <span class="string">'Guanghui Wang'</span>  <span class="comment">//child public property</span></span><br><span class="line">    getAuthor()&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.author)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) access child component data from parent component template’s childPointer variable</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">events-address</span> [<span class="attr">address</span>]=<span class="string">"event.location"</span> (<span class="attr">myclick</span>)=<span class="string">"clickWithAnyName($event)"</span> #<span class="attr">childPointer</span>&gt;</span><span class="tag">&lt;/<span class="name">events-address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"childPointer.getAuthor()"</span> <span class="attr">class</span>=<span class="string">"btn-primary btn"</span>&gt;</span>Test template variable<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;childPointer.author&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Styling-Components"><a href="#Styling-Components" class="headerlink" title="Styling Components"></a>Styling Components</h2><blockquote><p>By default, style scope is current component: the class defined below works only in current component, any other component applied same class won’t work.</p><p>Global css can be placed in styles.css</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    template: <span class="string">`&lt;button class="mybutton"&gt;styling component&lt;/button&gt;`</span>,</span><br><span class="line">    styles: [<span class="string">`.mybutton&#123;background:purple;&#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsAddressComponent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Create-Navbar"><a href="#Create-Navbar" class="headerlink" title="Create Navbar"></a>Create Navbar</h2><p>create nav/nav.component.ts and its template nav.component.html, then export component into module.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'nav-bar'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/nav/nav.component.html'</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">        .nav.navbar-nav &#123;font-size:15px;&#125;</span></span><br><span class="line"><span class="string">        #searchForm &#123;margin-right:100px;&#125;</span></span><br><span class="line"><span class="string">        @media(max-width:1200px) &#123;#searchForm &#123;display:none;&#125;&#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NavBarComponent</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Creating-and-Communicating-Between-Components&quot;&gt;&lt;a href=&quot;#Creating-and-Communicating-Between-Components&quot; class=&quot;headerlink&quot; title=&quot;Cr
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>angular2-chapter01 -- systemJS, tsconfig, package.json; first component, module and bootstrap module</title>
    <link href="https://wghglory.github.io/2017/04/18/angular2-chapter01/"/>
    <id>https://wghglory.github.io/2017/04/18/angular2-chapter01/</id>
    <published>2017-04-18T05:53:10.000Z</published>
    <updated>2017-11-22T15:33:20.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>Check code at: <a href="https://github.com/wghglory/angular2-fundamental" target="_blank" rel="noopener">https://github.com/wghglory/angular2-fundamental</a></p><h3 id="Systemjs"><a href="#Systemjs" class="headerlink" title="Systemjs"></a>Systemjs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  System.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">      <span class="string">'npm:'</span>: <span class="string">'node_modules/'</span>        <span class="comment">// paths serve as alias</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// map tells the System loader where to look for things</span></span><br><span class="line">    map: &#123;</span><br><span class="line">      app: <span class="string">'app'</span>,        <span class="comment">// our app is within the app folder</span></span><br><span class="line">      <span class="string">'@angular/core'</span>: <span class="string">'npm:@angular/core/bundles/core.umd.js'</span>,        <span class="comment">// angular bundles</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="string">'rxjs'</span>: <span class="string">'npm:rxjs'</span>,      <span class="comment">// other libraries</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// packages tells the System loader how to load when no filename and/or no extension</span></span><br><span class="line">    packages: &#123;</span><br><span class="line">      app: &#123;</span><br><span class="line">        main: <span class="string">'./main.js'</span>,</span><br><span class="line">        defaultExtension: <span class="string">'js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rxjs: &#123;</span><br><span class="line">        defaultExtension: <span class="string">'js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    template: <span class="string">'&lt;h2&gt;hello world&lt;/h2&gt;'</span>,</span><br><span class="line">    selector: <span class="string">'events-app'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EventsAppComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; EventsAppComponent &#125; <span class="keyword">from</span> <span class="string">'./events-app.component'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [BrowserModule],</span><br><span class="line">    declarations: [EventsAppComponent],</span><br><span class="line">    bootstrap: [EventsAppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bootstrap-main-ts"><a href="#bootstrap-main-ts" class="headerlink" title="bootstrap main.ts"></a>bootstrap main.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125;  <span class="keyword">from</span> <span class="string">'@angular/platform-browser-dynamic'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app.module'</span></span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Get-Started&quot;&gt;&lt;a href=&quot;#Get-Started&quot; class=&quot;headerlink&quot; title=&quot;Get Started&quot;&gt;&lt;/a&gt;Get Started&lt;/h1&gt;&lt;p&gt;Check code at: &lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="Angular2" scheme="https://wghglory.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Asp.net MVC系列教程9——控制器基类 主要做登录用户、权限认证、日志记录等工作</title>
    <link href="https://wghglory.github.io/2017/02/23/mvc-lesson9/"/>
    <id>https://wghglory.github.io/2017/02/23/mvc-lesson9/</id>
    <published>2017-02-23T08:51:54.000Z</published>
    <updated>2017-11-22T15:33:20.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本文转自<a href="http://yuangang.cnblogs.com并加以整理。" target="_blank" rel="noopener">http://yuangang.cnblogs.com并加以整理。</a> 今天我们来写一个控制器基类 主要做登录用户、权限认证、日志记录等工作</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p><a href="/2017/02/14/mvc-lesson1/" target="_blank">Asp.net MVC项目系列教程</a></p><h1 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h1><h3 id="一、在Controllers文件夹下新建一个控制器BaseController"><a href="#一、在Controllers文件夹下新建一个控制器BaseController" class="headerlink" title="一、在Controllers文件夹下新建一个控制器BaseController"></a>一、在Controllers文件夹下新建一个控制器BaseController</h3><p>用于控制器基类，主要做登录用户、权限认证、日志记录等工作</p><h3 id="二、声明公共变量和容器"><a href="#二、声明公共变量和容器" class="headerlink" title="二、声明公共变量和容器"></a>二、声明公共变量和容器</h3><p>变量主要用于我们查询分页的时候用户传递关键字、页码和分页条数</p><p>这个用户容器 主要是用户后台用户的一些操作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 公用变量</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 查询关键词</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Keywords &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 视图传递的分页页码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Page &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 视图传递的分页条数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Pagesize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 用户容器，公用</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> IUserManage UserManage = Spring.Context.Support.ContextRegistry.GetContext().GetObject(<span class="string">"Service.User"</span>) <span class="keyword">as</span> IUserManage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h3 id="三、获取当前用户对象"><a href="#三、获取当前用户对象" class="headerlink" title="三、获取当前用户对象"></a>三、获取当前用户对象</h3><p>从Sesssion中获取用户对象，Session过期后 通过 Cookies重新获取用户对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取当前用户对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> Account CurrentUser</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从Session中获取用户对象</span></span><br><span class="line">        <span class="keyword">if</span> (SessionHelper.GetSession(<span class="string">"CurrentUser"</span>) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> SessionHelper.GetSession(<span class="string">"CurrentUser"</span>) <span class="keyword">as</span> Account;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Session过期 通过Cookies中的信息 重新获取用户对象 并存储于Session中</span></span><br><span class="line">        <span class="keyword">var</span> account = UserManage.GetAccountByCookie();</span><br><span class="line">        SessionHelper.SetSession(<span class="string">"CurrentUser"</span>, account);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、重写OnActionExecuting方法"><a href="#四、重写OnActionExecuting方法" class="headerlink" title="四、重写OnActionExecuting方法"></a>四、重写OnActionExecuting方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//登录用户验证 1、判断Session对象是否存在 || 2、登录验证</span></span><br><span class="line">    <span class="keyword">if</span> (filterContext.HttpContext.Session == <span class="literal">null</span> || <span class="keyword">this</span>.CurrentUser == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        filterContext.HttpContext.Response.Write(</span><br><span class="line">               <span class="string">" &lt;script type='text/javascript'&gt; alert('~登录已过期，请重新登录');window.top.location='/'; &lt;/script&gt;"</span>);</span><br><span class="line">        filterContext.RequestContext.HttpContext.Response.End();</span><br><span class="line">        filterContext.Result = <span class="keyword">new</span> EmptyResult();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 公共Get变量</span></span><br><span class="line">    <span class="comment">//分页页码</span></span><br><span class="line">    <span class="keyword">string</span> p = filterContext.HttpContext.Request[<span class="string">"page"</span>];</span><br><span class="line">    Page = <span class="keyword">string</span>.IsNullOrEmpty(p) ? <span class="number">1</span> : <span class="keyword">int</span>.Parse(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜索关键词</span></span><br><span class="line">    <span class="keyword">string</span> search = filterContext.HttpContext.Request.QueryString[<span class="string">"search"</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(search))</span><br><span class="line">    &#123;</span><br><span class="line">        Keywords = search;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示分页条数</span></span><br><span class="line">    <span class="keyword">string</span> size = filterContext.HttpContext.Request.QueryString[<span class="string">"example_length"</span>];  <span class="comment">//todo: change name</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(size) &amp;&amp; System.Text.RegularExpressions.Regex.IsMatch(size.ToString(), <span class="string">@"^\d+$"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Pagesize = <span class="keyword">int</span>.Parse(size.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Pagesize = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、模块权限验证功能"><a href="#五、模块权限验证功能" class="headerlink" title="五、模块权限验证功能"></a>五、模块权限验证功能</h3><ol><li>根据模块别名验证对应模块</li><li>根据模块操作Action验证是否可操作按钮。</li></ol><p>如果用户对相应的模块没有相应的操作权限（添加、修改、删除、审核、发布等等，包含自定义操作类型），我们拒绝执行。网站的权限判断是非常普遍的需求，只要自定义一个类继承自AuthorizeAttribute或者实现IAuthorizeFilter，重写相关的判断逻辑就可以了。</p><p>原作者在basecontroller下面新建一个权限验证类UserAuthorizeAttribute，继承自AuthorizeAttribute。你也可以在合适的位置单独创建文件，会更好。</p><p>添加一个自定义的Attribute，通过AttributeUsage的Attribute来限定Attribute所施加的元素的类型。作为参数的AttributeTarges的值允许通过“或”操作来进行多个值得组合，如果你没有指定参数，那么默认参数就是All 。</p><p>AttributeUsage除了继承Attribute的方法和属性之外，还定义了以下三个属性：</p><ul><li><strong>AllowMultiple</strong>: 表示是否可以对一个程序元素施加多个Attribute</li><li><strong>Inherited</strong>: 表示是否施加的Attribute 可以被派生类继承或者重载。</li><li><strong>ValidOn</strong>: 指明Attribute可以被施加的元素的类型。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = <span class="literal">false</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthorizeAttribute</span> :</span> AuthorizeAttribute</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#region 字段和属性</span></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 模块别名，可配置更改</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ModuleAlias &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 权限动作</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OperationAction &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 权限访问控制器参数</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Sign &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 基类实例化</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> BaseController baseController = <span class="keyword">new</span> BaseController();</span><br><span class="line"></span><br><span class="line">    <span class="meta">#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//权限验证</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> override <span class="keyword">void</span> <span class="title">OnAuthorization</span><span class="params">(AuthorizationContext filterContext)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//1、判断模块是否对应</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(ModuleAlias))</span><br><span class="line">        &#123;</span><br><span class="line">            filterContext.HttpContext.Response.Write(<span class="string">" &lt;script type='text/javascript'&gt; alert('^您没有访问该页面的权限！'); &lt;/script&gt;"</span>);</span><br><span class="line">            filterContext.RequestContext.HttpContext.Response.End();</span><br><span class="line">            filterContext.Result = <span class="keyword">new</span> EmptyResult();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (baseController.CurrentUser == null)</span><br><span class="line">        &#123;</span><br><span class="line">            filterContext.HttpContext.Response.Write(<span class="string">" &lt;script type='text/javascript'&gt; alert('^登录已过期，请重新登录！');window.top.location='/'; &lt;/script&gt;"</span>);</span><br><span class="line">            filterContext.RequestContext.HttpContext.Response.End();</span><br><span class="line">            filterContext.Result = <span class="keyword">new</span> EmptyResult();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对比变量，用于权限认证</span></span><br><span class="line">        <span class="built_in">string</span> alias = ModuleAlias;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#region 配置Sign调取控制器标识</span></span><br><span class="line">        Sign = filterContext.RequestContext.HttpContext.Request.QueryString[<span class="string">"sign"</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(Sign))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="string">","</span> + ModuleAlias.ToLower()).Contains(<span class="string">","</span> + Sign.ToLower()))</span><br><span class="line">            &#123;</span><br><span class="line">                alias = Sign;</span><br><span class="line">                filterContext.Controller.ViewData[<span class="string">"Sign"</span>] = Sign;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#endregion</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、调用下面的方法，验证是否有访问此页面的权限，查看加操作</span></span><br><span class="line">        <span class="keyword">int</span> moduleId = baseController.CurrentUser.Modules.Where(p =&gt; p.ALIAS.ToLower() == alias.ToLower()).Select(p =&gt; p.ID).FirstOrDefault();</span><br><span class="line">        <span class="keyword">bool</span> _blAllowed = IsAllowed(baseController.CurrentUser, moduleId, OperationAction);</span><br><span class="line">        <span class="keyword">if</span> (!_blAllowed)</span><br><span class="line">        &#123;</span><br><span class="line">            filterContext.HttpContext.Response.Write(<span class="string">" &lt;script type='text/javascript'&gt; alert('您没有访问当前页面的权限！');&lt;/script&gt;"</span>);</span><br><span class="line">            filterContext.RequestContext.HttpContext.Response.End();</span><br><span class="line">            filterContext.Result = <span class="keyword">new</span> EmptyResult();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、有权限访问页面，将此页面的权限集合传给页面</span></span><br><span class="line">        filterContext.Controller.ViewData[<span class="string">"PermissionList"</span>] = GetPermissByJson(baseController.CurrentUser, moduleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 获取操作权限Json字符串，供视图JS判断使用。前台按钮没有这个权限就移除掉</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetPermissByJson</span><span class="params">(Account account, <span class="keyword">int</span> moduleId)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//操作权限</span></span><br><span class="line">        var _varPerListThisModule = account.Permissions.Where(p =&gt; p.MODULEID == moduleId).Select(R =&gt; <span class="keyword">new</span> &#123; R.PERVALUE &#125;).ToList();</span><br><span class="line">        <span class="keyword">return</span> Common.JsonHelper.JsonConverter.Serialize(_varPerListThisModule);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 功能描述：判断用户是否有此模块的操作权限。</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsAllowed</span><span class="params">(Account user, <span class="keyword">int</span> moduleId, <span class="built_in">string</span> action)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//判断入口</span></span><br><span class="line">        <span class="keyword">if</span> (user == null || user.Id &lt;= <span class="number">0</span> || moduleId == <span class="number">0</span> || <span class="built_in">string</span>.IsNullOrEmpty(action)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//验证权限</span></span><br><span class="line">        var permission = user.Permissions.Where(p =&gt; p.MODULEID == moduleId);</span><br><span class="line">        action = action.Trim(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (action.IndexOf(<span class="string">','</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            permission = permission.Where(p =&gt; action.ToLower().Contains(p.PERVALUE.ToLower()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            permission = permission.Where(p =&gt; p.PERVALUE.ToLower() == action.ToLower());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permission.Any();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 模型去重，非常重要</span></span><br><span class="line"><span class="comment">/// add yuangang by 2016-05-25</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleDistinct</span> :</span> IEqualityComparer&lt;Domain.SYS_MODULE&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Equals</span><span class="params">(Domain.SYS_MODULE x, Domain.SYS_MODULE y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.ID == y.ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetHashCode</span><span class="params">(Domain.SYS_MODULE obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.ToString().GetHashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面我们就用到这个基类，我先给大家看一下这个权限认证在后台是如何使用的，加上这一句就OK了</p><img src="/2017/02/23/mvc-lesson9/authorize.jpg"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;本文转自&lt;a href=&quot;http://yuangang.cnblogs.com并加以整理。&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="c#" scheme="https://wghglory.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Asp.net MVC系列教程8——完善登录功能</title>
    <link href="https://wghglory.github.io/2017/02/20/mvc-lesson8/"/>
    <id>https://wghglory.github.io/2017/02/20/mvc-lesson8/</id>
    <published>2017-02-20T13:05:53.000Z</published>
    <updated>2017-11-22T15:33:20.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本文转自<a href="http://yuangang.cnblogs.com并加以整理。" target="_blank" rel="noopener">http://yuangang.cnblogs.com并加以整理。</a> 今天我们来完善登录功能</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p><a href="/2017/02/14/mvc-lesson1/" target="_blank">Asp.net MVC项目系列教程</a></p><h1 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h1><h3 id="一、登录页面增加验证码"><a href="#一、登录页面增加验证码" class="headerlink" title="一、登录页面增加验证码"></a>一、登录页面增加验证码</h3><p>我们前面做了个简单的登录页，只有用户名和密码，现在我们增加一个验证码。</p><p>首先，原作者新建的验证码类verify_code.cs放在Models文件夹下面。我认为这个类放在Common类库要比Models要好，并且修改命名为Captcha。</p><blockquote><p>知识小百科：<strong>全自动区分计算机和人类的公開</strong><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener"><strong>图灵测试</strong></a>（英语：<strong>C</strong>ompletely <strong>A</strong>utomated <strong>P</strong>ublic <strong>T</strong>uring test to tell <strong>C</strong>omputers and <strong>H</strong>umans <strong>A</strong>part，簡稱<strong>CAPTCHA</strong>），俗称<strong>验证码</strong>，是一种区分用户是计算机或人的公共全自动程序。在CAPTCHA测试中，作为服务器的计算机会自动生成一个问题由用户来解答。这个问题可以由计算机生成并评判，但是必须只有人类才能解答。由于计算机无法解答CAPTCHA的问题，所以回答出问题的用户就可以被认为是人类。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Drawing.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Common</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 验证码构造类</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Captcha</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 该方法用于生成指定位数的随机数</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="VcodeNum"&gt;参数是随机数的位数&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns&gt;返回一个随机数字符串&lt;/returns&gt;</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">RndNum</span><span class="params">(<span class="keyword">int</span> VcodeNum)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//验证码可以显示的字符集合</span></span><br><span class="line">            <span class="built_in">string</span> Vchar = <span class="string">"0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p"</span> +</span><br><span class="line">                <span class="string">",q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,P,P,Q"</span> +</span><br><span class="line">                <span class="string">",R,S,T,U,V,W,X,Y,Z"</span>;</span><br><span class="line">            <span class="built_in">string</span>[] VcArray = Vchar.Split(<span class="keyword">new</span> Char[] &#123; <span class="string">','</span> &#125;);<span class="comment">//拆分成数组</span></span><br><span class="line">            <span class="built_in">string</span> VNum = <span class="string">""</span>;<span class="comment">//产生的随机数</span></span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">-1</span>;<span class="comment">//记录上次随机数值，尽量避避免生产几个一样的随机数</span></span><br><span class="line"></span><br><span class="line">            Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="comment">//采用一个简单的算法以保证生成随机数的不同</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; VcodeNum + <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    rand = <span class="keyword">new</span> Random(i * temp * unchecked((<span class="keyword">int</span>)DateTime.Now.Ticks));<span class="comment">//初始化随机类</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> t = rand.Next(<span class="number">61</span>);<span class="comment">//获取随机数</span></span><br><span class="line">                <span class="keyword">if</span> (temp != <span class="number">-1</span> &amp;&amp; temp == t)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> RndNum(VcodeNum);<span class="comment">//如果获取的随机数重复，则递归调用</span></span><br><span class="line">                &#125;</span><br><span class="line">                temp = t;<span class="comment">//把本次产生的随机数记录起来</span></span><br><span class="line">                VNum += VcArray[t];<span class="comment">//随机数的位数加一</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> VNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 该方法是将生成的随机数写入图像文件</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="VNum"&gt;VNum是一个随机数&lt;/param&gt;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MemoryStream <span class="title">Create</span><span class="params">(out <span class="built_in">string</span> VNum)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            VNum = RndNum(<span class="number">4</span>);</span><br><span class="line">            Bitmap Img = null;</span><br><span class="line">            Graphics g = null;</span><br><span class="line">            MemoryStream ms = null;</span><br><span class="line">            System.Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="comment">//验证码颜色集合</span></span><br><span class="line">            Color[] c = &#123; Color.Black, Color.Red, Color.DarkBlue, Color.Green, Color.Orange, Color.Brown, Color.DarkCyan, Color.Purple &#125;;</span><br><span class="line">            <span class="comment">//验证码字体集合</span></span><br><span class="line">            <span class="built_in">string</span>[] fonts = &#123; <span class="string">"Verdana"</span>, <span class="string">"Microsoft Sans Serif"</span>, <span class="string">"Comic Sans MS"</span>, <span class="string">"Arial"</span>, <span class="string">"宋体"</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义图像的大小，生成图像的实例</span></span><br><span class="line">            Img = <span class="keyword">new</span> Bitmap((<span class="keyword">int</span>)VNum.Length * <span class="number">18</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">            g = Graphics.FromImage(Img);<span class="comment">//从Img对象生成新的Graphics对象</span></span><br><span class="line"></span><br><span class="line">            g.Clear(Color.White);<span class="comment">//背景设为白色</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//在随机位置画背景点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x = random.Next(Img.Width);</span><br><span class="line">                <span class="keyword">int</span> y = random.Next(Img.Height);</span><br><span class="line">                g.DrawRectangle(<span class="keyword">new</span> Pen(Color.LightGray, <span class="number">0</span>), x, y, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//验证码绘制在g中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VNum.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> cindex = random.Next(<span class="number">7</span>);<span class="comment">//随机颜色索引值</span></span><br><span class="line">                <span class="keyword">int</span> findex = random.Next(<span class="number">5</span>);<span class="comment">//随机字体索引值</span></span><br><span class="line">                Font f = <span class="keyword">new</span> System.Drawing.Font(fonts[findex], <span class="number">15</span>, System.Drawing.FontStyle.Bold);<span class="comment">//字体</span></span><br><span class="line">                Brush b = <span class="keyword">new</span> System.Drawing.SolidBrush(c[cindex]);<span class="comment">//颜色</span></span><br><span class="line">                <span class="keyword">int</span> ii = <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">//控制验证码不在同一高度</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ii = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                g.DrawString(VNum.Substring(i, <span class="number">1</span>), f, b, <span class="number">3</span> + (i * <span class="number">12</span>), ii);<span class="comment">//绘制一个验证字符</span></span><br><span class="line">            &#125;</span><br><span class="line">            ms = <span class="keyword">new</span> MemoryStream();<span class="comment">//生成内存流对象</span></span><br><span class="line">            Img.Save(ms, ImageFormat.Jpeg);<span class="comment">//将此图像以Png图像文件的格式保存到流中</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//回收资源</span></span><br><span class="line">            g.Dispose();</span><br><span class="line">            Img.Dispose();</span><br><span class="line">            <span class="keyword">return</span> ms;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AccountController.cs下面新建一个生成图片的二进制图片</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 验证码</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FileContentResult <span class="title">ValidateCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> code = <span class="string">""</span>;</span><br><span class="line">    System.IO.MemoryStream ms = <span class="keyword">new</span> Captcha().Create(out code);</span><br><span class="line">    Session[<span class="string">"gif"</span>] = code;<span class="comment">//验证码存储在Session中，供验证。</span></span><br><span class="line">    Response.ClearContent();<span class="comment">//清空输出流</span></span><br><span class="line">    <span class="keyword">return</span> File(ms.ToArray(), @<span class="string">"image/png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在登录页面插入这个图片，放在登陆按钮之前。this.src+？是为了防止缓存，在点击图片是让浏览器发送新的请求，当然也有很多其他的方法，只要让每次url地址querystring不同就可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"from-control"</span>&gt;</span></span><br><span class="line">    @Html.TextBox("code", "",</span><br><span class="line">            new</span><br><span class="line">            &#123;</span><br><span class="line">                @class = "form-control",</span><br><span class="line">                @placeholder = "请输入验证码",</span><br><span class="line">                @datatype = "*",</span><br><span class="line">                @nullmsg = "请输入验证码！",</span><br><span class="line">                @maxlength = 4,</span><br><span class="line">                @required = "required",</span><br><span class="line">                @autocomplete = "off"</span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"code-img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imgVerify"</span> <span class="attr">src</span>=<span class="string">"/Sys/Account/ValidateCode"</span> <span class="attr">alt</span>=<span class="string">"看不清？点击更换"</span> <span class="attr">onclick</span>=<span class="string">"this.src = this.src + '?'"</span> <span class="attr">style</span>=<span class="string">"vertical-align:middle;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带验证码的完整登录页面表单就好了。</p><p><img src="/2017/02/20/mvc-lesson8/login.png" style="height:220px;"></p><h3 id="二、增加验证码的功能"><a href="#二、增加验证码的功能" class="headerlink" title="二、增加验证码的功能"></a>二、增加验证码的功能</h3><ol><li>首先获取一下表单验证码<code>string code = Request.Form[&quot;code&quot;];</code></li><li>然后判断验证码图片是否过期，即 Session存储的验证码是否存在<code>if (Session[&quot;gif&quot;] != null)</code></li><li>在Session存储的验证码没有过期，即Session[“gif”] != null里面判断一下用户输入的验证码是否正确<code>if (!string.IsNullOrEmpty(code) &amp;&amp; code.ToLower() == Session[&quot;gif&quot;].ToString().ToLower())</code></li><li><p>把登录验证方法放到用户验证码输入正确的方法体里面（如果用户输入的验证码不正确，就没有必要验证用户信息了）</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 登录验证</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Login</span><span class="params">(Domain.SYS_USER item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    var json = <span class="keyword">new</span> JsonHelper() &#123; Msg = <span class="string">"登录成功"</span>, Status = <span class="string">"n"</span> &#125;;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取表单验证码</span></span><br><span class="line">        <span class="built_in">string</span> code = Request.Form[<span class="string">"code"</span>];</span><br><span class="line">        <span class="keyword">if</span> (Session[<span class="string">"gif"</span>] != null)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(code) &amp;&amp; code.ToLower() == Session[<span class="string">"gif"</span>].ToString().ToLower())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//调用登录验证接口 返回用户实体类</span></span><br><span class="line">                var user = UserManage.UserLogin(item.ACCOUNT.Trim(), item.PASSWORD.Trim());</span><br><span class="line">                <span class="keyword">if</span> (user != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//是否锁定</span></span><br><span class="line">                    <span class="keyword">if</span> (user.ISCANLOGIN == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        json.Msg = <span class="string">"用户已锁定，禁止登录，请联系管理员进行解锁"</span>;</span><br><span class="line">                        <span class="built_in">log</span>.Warn(Utils.GetIP(), item.ACCOUNT, Request.Url.ToString(), <span class="string">"Login"</span>, <span class="string">"系统登录，登录结果："</span> + json.Msg);</span><br><span class="line">                        <span class="keyword">return</span> Json(json);</span><br><span class="line">                    &#125;</span><br><span class="line">                    json.Status = <span class="string">"y"</span>;</span><br><span class="line">                    <span class="built_in">log</span>.Info(Utils.GetIP(), item.ACCOUNT, Request.Url.ToString(), <span class="string">"Login"</span>, <span class="string">"系统登录，登录结果："</span> + json.Msg);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    json.Msg = <span class="string">"用户名或密码不正确"</span>;</span><br><span class="line">                    <span class="built_in">log</span>.Error(Utils.GetIP(), item.ACCOUNT, Request.Url.ToString(), <span class="string">"Login"</span>, <span class="string">"系统登录，登录结果："</span> + json.Msg);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                json.Msg = <span class="string">"验证码不正确"</span>;</span><br><span class="line">                <span class="built_in">log</span>.Error(Utils.GetIP(), item.ACCOUNT, Request.Url.ToString(), <span class="string">"Login"</span>, <span class="string">"系统登录，登录结果："</span> + json.Msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            json.Msg = <span class="string">"验证码已过期，请刷新验证码"</span>;</span><br><span class="line">            <span class="built_in">log</span>.Error(Utils.GetIP(), item.ACCOUNT, Request.Url.ToString(), <span class="string">"Login"</span>, <span class="string">"系统登录，登录结果："</span> + json.Msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        json.Msg = e.Message;</span><br><span class="line">        <span class="built_in">log</span>.Error(Utils.GetIP(), item.ACCOUNT, Request.Url.ToString(), <span class="string">"Login"</span>, <span class="string">"系统登录，登录结果："</span> + json.Msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Json(json, JsonRequestBehavior.AllowGet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、修改验证方法"><a href="#三、修改验证方法" class="headerlink" title="三、修改验证方法"></a>三、修改验证方法</h3><p>验证码没有过期且用户输入的验证码正确，这种情况下就应该验证用户信息了。</p><p>上一篇，我们验证用户信息真实的情况下，直接通过Json输出了Status=”y”，但是并没有存储用户信息。现在我们分两步来存储用户，首先通过Session存储，然后把用户非关键信息加密后写入Cookies，当Session过期的时候，通过Cookies重新获取用户并存储用户信息。这是大致的流程，很多朋友会说这也不是很安全，是的，软件是没有绝对的100%安全的，我们只能做到自己最好的安全。</p><ol><li><p>在前一章用户类Account描述了用户的详细信息，包括部门、权限、岗位、角色等。在<em>是否锁定那个if语句</em>后面，我们开始写下面的代码。通过用户基础表来获取一下这些信息：</p><p><code>var account = this.UserManage.GetAccountByUser(user);</code></p></li><li><p>写入当前用户到Session中</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入Session 当前登录用户</span></span><br><span class="line">SessionHelper.SetSession(<span class="string">"CurrentUser"</span>, account);</span><br></pre></td></tr></table></figure></li><li><p>记录用户ID、登录名、密码到Cookie</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录用户信息到Cookies</span></span><br><span class="line"><span class="built_in">string</span> cookieValue = <span class="string">"&#123;\"id\":\""</span> + account.Id + <span class="string">"\",\"username\":\""</span> + account.LogName +  <span class="string">"\",\"password\":\""</span> + account.PassWord + <span class="string">"\",\"ToKen\":\""</span> + Session.SessionID + <span class="string">"\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">CookieHelper.SetCookie(<span class="string">"cookie_rememberme"</span>, <span class="keyword">new</span> Common.CryptHelper.AESCrypt().Encrypt(cookieValue),null);</span><br></pre></td></tr></table></figure></li><li><p>更新用户本次登录的IP</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新用户本次登录IP</span></span><br><span class="line">user.LastLoginIP = Utils.GetIP();</span><br><span class="line">UserManage.Update(user);</span><br></pre></td></tr></table></figure></li><li><p>如果验证成功，跳转到管理中心首页 </p><p> <code>json.ReUrl = &quot;/Sys/Home/Index&quot;;</code></p></li></ol><p>这样，我们的登录就OK了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;本文转自&lt;a href=&quot;http://yuangang.cnblogs.com并加以整理。&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="c#" scheme="https://wghglory.github.io/tags/c/"/>
    
  </entry>
  
</feed>
